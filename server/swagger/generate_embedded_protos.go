//go:build ignore

package main

import (
	"fmt"
	"os"
	"strings"
)

// This script generates embedded_protos_generated.go with proto file contents as constants
func main() {
	protoFiles := map[string]string{
		"oracleQueryProto":    "../../proto/guru/oracle/v1/query.proto",
		"oracleTxProto":       "../../proto/guru/oracle/v1/tx.proto",
		"feepolicyQueryProto": "../../proto/guru/feepolicy/v1/query.proto",
		"feepolicyTxProto":    "../../proto/guru/feepolicy/v1/tx.proto",
	}

	var output strings.Builder
	output.WriteString("// Code generated by generate_embedded_protos.go; DO NOT EDIT.\n\n")
	output.WriteString("package swagger\n\n")

	for varName, filePath := range protoFiles {
		content, err := os.ReadFile(filePath)
		if err != nil {
			fmt.Printf("Error reading %s: %v\n", filePath, err)
			continue
		}

		// Escape the content for Go string literal
		escaped := strings.ReplaceAll(string(content), "`", "` + \"`\" + `")

		output.WriteString(fmt.Sprintf("// %s contains the content of %s\n", varName, filePath))
		output.WriteString(fmt.Sprintf("const %s = `%s`\n\n", varName, escaped))
	}

	// Write the generated file
	err := os.WriteFile("embedded_protos_generated.go", []byte(output.String()), 0644)
	if err != nil {
		fmt.Printf("Error writing generated file: %v\n", err)
		os.Exit(1)
	}

	fmt.Println("Generated embedded_protos_generated.go successfully")
}
