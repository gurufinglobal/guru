// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guru/feepolicy/v1/feepolicy.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Discount struct {
	DiscountType string                      `protobuf:"bytes,1,opt,name=discountType,proto3" json:"discountType,omitempty"`
	MsgType      string                      `protobuf:"bytes,2,opt,name=msgType,proto3" json:"msgType,omitempty"`
	Amount       cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"amount"`
}

func (m *Discount) Reset()         { *m = Discount{} }
func (m *Discount) String() string { return proto.CompactTextString(m) }
func (*Discount) ProtoMessage()    {}
func (*Discount) Descriptor() ([]byte, []int) {
	return fileDescriptor_10647dcd185ba7d7, []int{0}
}
func (m *Discount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Discount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Discount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Discount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Discount.Merge(m, src)
}
func (m *Discount) XXX_Size() int {
	return m.Size()
}
func (m *Discount) XXX_DiscardUnknown() {
	xxx_messageInfo_Discount.DiscardUnknown(m)
}

var xxx_messageInfo_Discount proto.InternalMessageInfo

func (m *Discount) GetDiscountType() string {
	if m != nil {
		return m.DiscountType
	}
	return ""
}

func (m *Discount) GetMsgType() string {
	if m != nil {
		return m.MsgType
	}
	return ""
}

type ModuleDiscount struct {
	Module    string     `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Discounts []Discount `protobuf:"bytes,2,rep,name=discounts,proto3" json:"discounts"`
}

func (m *ModuleDiscount) Reset()         { *m = ModuleDiscount{} }
func (m *ModuleDiscount) String() string { return proto.CompactTextString(m) }
func (*ModuleDiscount) ProtoMessage()    {}
func (*ModuleDiscount) Descriptor() ([]byte, []int) {
	return fileDescriptor_10647dcd185ba7d7, []int{1}
}
func (m *ModuleDiscount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleDiscount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleDiscount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleDiscount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleDiscount.Merge(m, src)
}
func (m *ModuleDiscount) XXX_Size() int {
	return m.Size()
}
func (m *ModuleDiscount) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleDiscount.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleDiscount proto.InternalMessageInfo

func (m *ModuleDiscount) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *ModuleDiscount) GetDiscounts() []Discount {
	if m != nil {
		return m.Discounts
	}
	return nil
}

type AccountDiscount struct {
	Address string           `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Modules []ModuleDiscount `protobuf:"bytes,2,rep,name=modules,proto3" json:"modules"`
}

func (m *AccountDiscount) Reset()         { *m = AccountDiscount{} }
func (m *AccountDiscount) String() string { return proto.CompactTextString(m) }
func (*AccountDiscount) ProtoMessage()    {}
func (*AccountDiscount) Descriptor() ([]byte, []int) {
	return fileDescriptor_10647dcd185ba7d7, []int{2}
}
func (m *AccountDiscount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountDiscount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountDiscount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountDiscount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountDiscount.Merge(m, src)
}
func (m *AccountDiscount) XXX_Size() int {
	return m.Size()
}
func (m *AccountDiscount) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountDiscount.DiscardUnknown(m)
}

var xxx_messageInfo_AccountDiscount proto.InternalMessageInfo

func (m *AccountDiscount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AccountDiscount) GetModules() []ModuleDiscount {
	if m != nil {
		return m.Modules
	}
	return nil
}

type AccountDiscounts struct {
	Discounts []AccountDiscount `protobuf:"bytes,1,rep,name=discounts,proto3" json:"discounts"`
}

func (m *AccountDiscounts) Reset()         { *m = AccountDiscounts{} }
func (m *AccountDiscounts) String() string { return proto.CompactTextString(m) }
func (*AccountDiscounts) ProtoMessage()    {}
func (*AccountDiscounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_10647dcd185ba7d7, []int{3}
}
func (m *AccountDiscounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountDiscounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountDiscounts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountDiscounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountDiscounts.Merge(m, src)
}
func (m *AccountDiscounts) XXX_Size() int {
	return m.Size()
}
func (m *AccountDiscounts) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountDiscounts.DiscardUnknown(m)
}

var xxx_messageInfo_AccountDiscounts proto.InternalMessageInfo

func (m *AccountDiscounts) GetDiscounts() []AccountDiscount {
	if m != nil {
		return m.Discounts
	}
	return nil
}

type Moderator struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Moderator) Reset()         { *m = Moderator{} }
func (m *Moderator) String() string { return proto.CompactTextString(m) }
func (*Moderator) ProtoMessage()    {}
func (*Moderator) Descriptor() ([]byte, []int) {
	return fileDescriptor_10647dcd185ba7d7, []int{4}
}
func (m *Moderator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Moderator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Moderator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Moderator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Moderator.Merge(m, src)
}
func (m *Moderator) XXX_Size() int {
	return m.Size()
}
func (m *Moderator) XXX_DiscardUnknown() {
	xxx_messageInfo_Moderator.DiscardUnknown(m)
}

var xxx_messageInfo_Moderator proto.InternalMessageInfo

func (m *Moderator) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*Discount)(nil), "guru.feepolicy.v1.Discount")
	proto.RegisterType((*ModuleDiscount)(nil), "guru.feepolicy.v1.ModuleDiscount")
	proto.RegisterType((*AccountDiscount)(nil), "guru.feepolicy.v1.AccountDiscount")
	proto.RegisterType((*AccountDiscounts)(nil), "guru.feepolicy.v1.AccountDiscounts")
	proto.RegisterType((*Moderator)(nil), "guru.feepolicy.v1.Moderator")
}

func init() { proto.RegisterFile("guru/feepolicy/v1/feepolicy.proto", fileDescriptor_10647dcd185ba7d7) }

var fileDescriptor_10647dcd185ba7d7 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xcf, 0x8b, 0xda, 0x40,
	0x14, 0xce, 0x68, 0xd1, 0x3a, 0x2d, 0x6d, 0x0d, 0xa5, 0xa4, 0x0a, 0x51, 0x03, 0x05, 0x29, 0x98,
	0x41, 0x85, 0x5e, 0x8b, 0x22, 0xed, 0xa5, 0x96, 0x22, 0x9e, 0xbc, 0x94, 0x38, 0x99, 0xc6, 0xd0,
	0xc4, 0x09, 0x99, 0x24, 0x98, 0xff, 0xa2, 0xc7, 0xfe, 0x09, 0x7b, 0xdc, 0xc3, 0xfe, 0x11, 0x1e,
	0x65, 0x4f, 0xcb, 0x1e, 0x64, 0xd1, 0xc3, 0xfe, 0x1b, 0x4b, 0x26, 0x13, 0x7f, 0xef, 0x25, 0xbc,
	0xef, 0x7d, 0xef, 0x7d, 0xdf, 0xf7, 0xc2, 0xc0, 0x86, 0x15, 0xfa, 0x21, 0xfa, 0x43, 0x88, 0x47,
	0x1d, 0x1b, 0xc7, 0x28, 0x6a, 0xef, 0x81, 0xee, 0xf9, 0x34, 0xa0, 0x72, 0x39, 0x19, 0xd1, 0xf7,
	0xdd, 0xa8, 0x5d, 0x79, 0x6f, 0x51, 0x8b, 0x72, 0x16, 0x25, 0x55, 0x3a, 0x58, 0xf9, 0x88, 0x29,
	0x73, 0x29, 0xfb, 0x9d, 0x12, 0x29, 0x10, 0x54, 0xd9, 0x70, 0xed, 0x39, 0x45, 0xfc, 0x9b, 0xb6,
	0xb4, 0xff, 0x00, 0xbe, 0x1c, 0xd8, 0x0c, 0xd3, 0x70, 0x1e, 0xc8, 0x1a, 0x7c, 0x6d, 0x8a, 0x7a,
	0x1c, 0x7b, 0x44, 0x01, 0x75, 0xd0, 0x2c, 0x8d, 0x8e, 0x7a, 0xb2, 0x02, 0x8b, 0x2e, 0xb3, 0x38,
	0x9d, 0xe3, 0x74, 0x06, 0xe5, 0x9f, 0xb0, 0x60, 0xb8, 0xc9, 0x9c, 0x92, 0x4f, 0x88, 0xfe, 0x97,
	0xe5, 0xba, 0x26, 0xdd, 0xaf, 0x6b, 0xd5, 0x34, 0x03, 0x33, 0xff, 0xea, 0x36, 0x45, 0xae, 0x11,
	0xcc, 0xf4, 0x1f, 0xc4, 0x32, 0x70, 0x3c, 0x20, 0xf8, 0xf6, 0xa6, 0x05, 0x45, 0xc4, 0x01, 0xc1,
	0x57, 0x8f, 0xd7, 0x9f, 0xc1, 0x48, 0xa8, 0x68, 0x36, 0x7c, 0x33, 0xa4, 0x66, 0xe8, 0x90, 0x5d,
	0xbe, 0x0f, 0xb0, 0xe0, 0xf2, 0x8e, 0x48, 0x26, 0x90, 0xfc, 0x15, 0x96, 0xb2, 0x8c, 0x4c, 0xc9,
	0xd5, 0xf3, 0xcd, 0x57, 0x9d, 0xaa, 0x7e, 0xf6, 0xbf, 0xf4, 0x4c, 0xa7, 0xff, 0x22, 0x49, 0x36,
	0xda, 0xef, 0x68, 0x73, 0xf8, 0xb6, 0x87, 0x79, 0xbd, 0xf3, 0x52, 0x60, 0xd1, 0x30, 0x4d, 0x9f,
	0x30, 0x26, 0xcc, 0x32, 0x28, 0xf7, 0x60, 0x31, 0xf5, 0xcd, 0xbc, 0x1a, 0x17, 0xbc, 0x8e, 0x93,
	0x0b, 0xc7, 0x6c, 0x4f, 0x9b, 0xc0, 0x77, 0x27, 0x7e, 0x4c, 0xfe, 0x76, 0x78, 0x04, 0xe0, 0xc2,
	0xda, 0x05, 0xe1, 0x93, 0xbd, 0xf3, 0x5b, 0x3e, 0xc1, 0xd2, 0x90, 0x9a, 0xc4, 0x37, 0x02, 0xea,
	0x3f, 0x7f, 0x45, 0x7f, 0xb8, 0xdc, 0xa8, 0x60, 0xb5, 0x51, 0xc1, 0xc3, 0x46, 0x05, 0xff, 0xb6,
	0xaa, 0xb4, 0xda, 0xaa, 0xd2, 0xdd, 0x56, 0x95, 0x26, 0x5d, 0xcb, 0x0e, 0x66, 0xe1, 0x54, 0xc7,
	0xd4, 0x45, 0xdf, 0x7f, 0x8d, 0x17, 0x2d, 0xcb, 0xa1, 0x53, 0xc3, 0x41, 0x49, 0x96, 0x56, 0xd4,
	0x41, 0x51, 0x07, 0x2d, 0x0e, 0xde, 0x6a, 0x10, 0x7b, 0x84, 0x4d, 0x0b, 0xfc, 0x39, 0x75, 0x9f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xa6, 0xf0, 0x31, 0xca, 0x02, 0x00, 0x00,
}

func (m *Discount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Discount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Discount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFeepolicy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.MsgType) > 0 {
		i -= len(m.MsgType)
		copy(dAtA[i:], m.MsgType)
		i = encodeVarintFeepolicy(dAtA, i, uint64(len(m.MsgType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DiscountType) > 0 {
		i -= len(m.DiscountType)
		copy(dAtA[i:], m.DiscountType)
		i = encodeVarintFeepolicy(dAtA, i, uint64(len(m.DiscountType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ModuleDiscount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleDiscount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleDiscount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Discounts) > 0 {
		for iNdEx := len(m.Discounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Discounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFeepolicy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintFeepolicy(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountDiscount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountDiscount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountDiscount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Modules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFeepolicy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintFeepolicy(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountDiscounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountDiscounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountDiscounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Discounts) > 0 {
		for iNdEx := len(m.Discounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Discounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFeepolicy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Moderator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Moderator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Moderator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintFeepolicy(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFeepolicy(dAtA []byte, offset int, v uint64) int {
	offset -= sovFeepolicy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Discount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DiscountType)
	if l > 0 {
		n += 1 + l + sovFeepolicy(uint64(l))
	}
	l = len(m.MsgType)
	if l > 0 {
		n += 1 + l + sovFeepolicy(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovFeepolicy(uint64(l))
	return n
}

func (m *ModuleDiscount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovFeepolicy(uint64(l))
	}
	if len(m.Discounts) > 0 {
		for _, e := range m.Discounts {
			l = e.Size()
			n += 1 + l + sovFeepolicy(uint64(l))
		}
	}
	return n
}

func (m *AccountDiscount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovFeepolicy(uint64(l))
	}
	if len(m.Modules) > 0 {
		for _, e := range m.Modules {
			l = e.Size()
			n += 1 + l + sovFeepolicy(uint64(l))
		}
	}
	return n
}

func (m *AccountDiscounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Discounts) > 0 {
		for _, e := range m.Discounts {
			l = e.Size()
			n += 1 + l + sovFeepolicy(uint64(l))
		}
	}
	return n
}

func (m *Moderator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovFeepolicy(uint64(l))
	}
	return n
}

func sovFeepolicy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFeepolicy(x uint64) (n int) {
	return sovFeepolicy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Discount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeepolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Discount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Discount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeepolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeepolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscountType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeepolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeepolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeepolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeepolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeepolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeepolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleDiscount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeepolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleDiscount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleDiscount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeepolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeepolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeepolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeepolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Discounts = append(m.Discounts, Discount{})
			if err := m.Discounts[len(m.Discounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeepolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeepolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountDiscount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeepolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountDiscount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountDiscount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeepolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeepolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeepolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeepolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, ModuleDiscount{})
			if err := m.Modules[len(m.Modules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeepolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeepolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountDiscounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeepolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountDiscounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountDiscounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeepolicy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFeepolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Discounts = append(m.Discounts, AccountDiscount{})
			if err := m.Discounts[len(m.Discounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeepolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeepolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Moderator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeepolicy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Moderator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Moderator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeepolicy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeepolicy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeepolicy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeepolicy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeepolicy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeepolicy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeepolicy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeepolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeepolicy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFeepolicy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFeepolicy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFeepolicy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFeepolicy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeepolicy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFeepolicy = fmt.Errorf("proto: unexpected end of group")
)
