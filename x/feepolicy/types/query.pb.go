// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guru/feepolicy/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Request type for the Query/ModeratorAddress RPC method.
type QueryModeratorAddressRequest struct {
}

func (m *QueryModeratorAddressRequest) Reset()         { *m = QueryModeratorAddressRequest{} }
func (m *QueryModeratorAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModeratorAddressRequest) ProtoMessage()    {}
func (*QueryModeratorAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37a9b2df9fd57578, []int{0}
}
func (m *QueryModeratorAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModeratorAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModeratorAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModeratorAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModeratorAddressRequest.Merge(m, src)
}
func (m *QueryModeratorAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModeratorAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModeratorAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModeratorAddressRequest proto.InternalMessageInfo

// Response type for the Query/ModeratorAddress RPC method.
type QueryModeratorAddressResponse struct {
	ModeratorAddress string `protobuf:"bytes,1,opt,name=moderator_address,json=moderatorAddress,proto3" json:"moderator_address,omitempty"`
}

func (m *QueryModeratorAddressResponse) Reset()         { *m = QueryModeratorAddressResponse{} }
func (m *QueryModeratorAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModeratorAddressResponse) ProtoMessage()    {}
func (*QueryModeratorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37a9b2df9fd57578, []int{1}
}
func (m *QueryModeratorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModeratorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModeratorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModeratorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModeratorAddressResponse.Merge(m, src)
}
func (m *QueryModeratorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModeratorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModeratorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModeratorAddressResponse proto.InternalMessageInfo

func (m *QueryModeratorAddressResponse) GetModeratorAddress() string {
	if m != nil {
		return m.ModeratorAddress
	}
	return ""
}

// QueryDiscountsRequest is the request type for the Query/Discounts RPC
// method
type QueryDiscountsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDiscountsRequest) Reset()         { *m = QueryDiscountsRequest{} }
func (m *QueryDiscountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDiscountsRequest) ProtoMessage()    {}
func (*QueryDiscountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37a9b2df9fd57578, []int{2}
}
func (m *QueryDiscountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDiscountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDiscountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDiscountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDiscountsRequest.Merge(m, src)
}
func (m *QueryDiscountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDiscountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDiscountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDiscountsRequest proto.InternalMessageInfo

func (m *QueryDiscountsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDiscountsResponse is the response type for the Query/Discounts RPC
// method.
type QueryDiscountsResponse struct {
	Discounts []AccountDiscount `protobuf:"bytes,1,rep,name=discounts,proto3" json:"discounts"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDiscountsResponse) Reset()         { *m = QueryDiscountsResponse{} }
func (m *QueryDiscountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDiscountsResponse) ProtoMessage()    {}
func (*QueryDiscountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37a9b2df9fd57578, []int{3}
}
func (m *QueryDiscountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDiscountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDiscountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDiscountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDiscountsResponse.Merge(m, src)
}
func (m *QueryDiscountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDiscountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDiscountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDiscountsResponse proto.InternalMessageInfo

func (m *QueryDiscountsResponse) GetDiscounts() []AccountDiscount {
	if m != nil {
		return m.Discounts
	}
	return nil
}

func (m *QueryDiscountsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDiscountRequest is the request type for the Query/Discount RPC
// method
type QueryDiscountRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryDiscountRequest) Reset()         { *m = QueryDiscountRequest{} }
func (m *QueryDiscountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDiscountRequest) ProtoMessage()    {}
func (*QueryDiscountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37a9b2df9fd57578, []int{4}
}
func (m *QueryDiscountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDiscountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDiscountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDiscountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDiscountRequest.Merge(m, src)
}
func (m *QueryDiscountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDiscountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDiscountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDiscountRequest proto.InternalMessageInfo

func (m *QueryDiscountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryDiscountResponse is the response type for the Query/Discount RPC
// method.
type QueryDiscountResponse struct {
	Discount AccountDiscount `protobuf:"bytes,1,opt,name=discount,proto3" json:"discount"`
}

func (m *QueryDiscountResponse) Reset()         { *m = QueryDiscountResponse{} }
func (m *QueryDiscountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDiscountResponse) ProtoMessage()    {}
func (*QueryDiscountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37a9b2df9fd57578, []int{5}
}
func (m *QueryDiscountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDiscountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDiscountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDiscountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDiscountResponse.Merge(m, src)
}
func (m *QueryDiscountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDiscountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDiscountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDiscountResponse proto.InternalMessageInfo

func (m *QueryDiscountResponse) GetDiscount() AccountDiscount {
	if m != nil {
		return m.Discount
	}
	return AccountDiscount{}
}

func init() {
	proto.RegisterType((*QueryModeratorAddressRequest)(nil), "guru.feepolicy.v1.QueryModeratorAddressRequest")
	proto.RegisterType((*QueryModeratorAddressResponse)(nil), "guru.feepolicy.v1.QueryModeratorAddressResponse")
	proto.RegisterType((*QueryDiscountsRequest)(nil), "guru.feepolicy.v1.QueryDiscountsRequest")
	proto.RegisterType((*QueryDiscountsResponse)(nil), "guru.feepolicy.v1.QueryDiscountsResponse")
	proto.RegisterType((*QueryDiscountRequest)(nil), "guru.feepolicy.v1.QueryDiscountRequest")
	proto.RegisterType((*QueryDiscountResponse)(nil), "guru.feepolicy.v1.QueryDiscountResponse")
}

func init() { proto.RegisterFile("guru/feepolicy/v1/query.proto", fileDescriptor_37a9b2df9fd57578) }

var fileDescriptor_37a9b2df9fd57578 = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4f, 0x4b, 0x1b, 0x41,
	0x18, 0xc6, 0x33, 0xda, 0x3f, 0x66, 0xbc, 0xe8, 0x60, 0x4b, 0x08, 0x71, 0x6b, 0x17, 0x89, 0xe9,
	0x1f, 0x67, 0xcc, 0xfa, 0x09, 0x14, 0xd1, 0x4b, 0x05, 0x1b, 0x7a, 0x2a, 0x14, 0x99, 0xdd, 0x4c,
	0xa7, 0x0b, 0xc9, 0xce, 0xba, 0x33, 0xbb, 0x18, 0x4a, 0x2f, 0x3d, 0xf4, 0x56, 0x28, 0xf4, 0x23,
	0xf4, 0xd4, 0x2f, 0x52, 0x3c, 0x0a, 0xbd, 0xf4, 0x54, 0x4a, 0xd2, 0x0f, 0x22, 0x99, 0xd9, 0x49,
	0xcc, 0x46, 0x4d, 0x6e, 0x49, 0xde, 0xf7, 0x79, 0xde, 0xdf, 0xfb, 0xcc, 0x4b, 0xe0, 0x3a, 0x4f,
	0x93, 0x94, 0xbc, 0x67, 0x2c, 0x16, 0x9d, 0x30, 0xe8, 0x91, 0xac, 0x49, 0xce, 0x52, 0x96, 0xf4,
	0x70, 0x9c, 0x08, 0x25, 0xd0, 0xea, 0xb0, 0x8c, 0x47, 0x65, 0x9c, 0x35, 0xab, 0x6b, 0x5c, 0x70,
	0xa1, 0xab, 0x64, 0xf8, 0xc9, 0x34, 0x56, 0x9f, 0x07, 0x42, 0x76, 0x85, 0x24, 0x3e, 0x95, 0xcc,
	0x38, 0x90, 0xac, 0xe9, 0x33, 0x45, 0x9b, 0x24, 0xa6, 0x3c, 0x8c, 0xa8, 0x0a, 0x45, 0x94, 0xf7,
	0x3e, 0x9d, 0x9e, 0x39, 0x9e, 0x60, 0x5a, 0x6a, 0x5c, 0x08, 0xde, 0x61, 0x84, 0xc6, 0x21, 0xa1,
	0x51, 0x24, 0x94, 0xd6, 0x4b, 0x53, 0x75, 0x1d, 0x58, 0x7b, 0x3d, 0x1c, 0x71, 0x2c, 0xda, 0x2c,
	0xa1, 0x4a, 0x24, 0x7b, 0xed, 0x76, 0xc2, 0xa4, 0x6c, 0xb1, 0xb3, 0x94, 0x49, 0xe5, 0xbe, 0x82,
	0xeb, 0xb7, 0xd4, 0x65, 0x2c, 0x22, 0xc9, 0xd0, 0x0b, 0xb8, 0xda, 0xb5, 0xb5, 0x53, 0x6a, 0x8a,
	0x15, 0xb0, 0x01, 0x1a, 0xe5, 0xd6, 0x4a, 0xb7, 0x20, 0x72, 0x4f, 0xe1, 0x23, 0xed, 0x76, 0x10,
	0xca, 0x40, 0xa4, 0x91, 0xb2, 0x63, 0xd0, 0x21, 0x84, 0xe3, 0xdd, 0xb4, 0x7c, 0xd9, 0xab, 0x63,
	0x13, 0x04, 0x1e, 0x06, 0x81, 0x4d, 0x94, 0x79, 0x10, 0xf8, 0x84, 0x72, 0x96, 0x6b, 0x5b, 0xd7,
	0x94, 0xee, 0x4f, 0x00, 0x1f, 0x17, 0x27, 0xe4, 0xa0, 0x87, 0xb0, 0xdc, 0xb6, 0x3f, 0x56, 0xc0,
	0xc6, 0x62, 0x63, 0xd9, 0x73, 0xf1, 0xd4, 0x9b, 0xe0, 0xbd, 0x40, 0xb7, 0x58, 0xfd, 0xfe, 0xbd,
	0x8b, 0xbf, 0x4f, 0x4a, 0xad, 0xb1, 0x14, 0x1d, 0x4d, 0xa0, 0x2e, 0x68, 0xd4, 0xad, 0x99, 0xa8,
	0x06, 0x62, 0x82, 0x75, 0x07, 0xae, 0x4d, 0xa0, 0xda, 0x2c, 0x2a, 0xf0, 0xe1, 0x64, 0x8e, 0xf6,
	0xab, 0xfb, 0xae, 0x10, 0xdf, 0x68, 0xb7, 0x03, 0xb8, 0x64, 0x01, 0xf3, 0xf0, 0xe6, 0x5f, 0x6d,
	0xa4, 0xf4, 0x7e, 0x2d, 0xc2, 0xfb, 0xda, 0x1f, 0xfd, 0x00, 0x70, 0xa5, 0xf8, 0xe2, 0x88, 0xdc,
	0x60, 0x79, 0xd7, 0xed, 0x54, 0x77, 0xe6, 0x17, 0x98, 0x3d, 0xdc, 0x97, 0x9f, 0x7f, 0xff, 0xff,
	0xbe, 0x50, 0x47, 0x9b, 0x64, 0xfa, 0xae, 0xa7, 0xae, 0x0c, 0x7d, 0x01, 0xb0, 0x3c, 0x7a, 0x67,
	0xd4, 0xb8, 0x6d, 0x5a, 0xf1, 0xd8, 0xaa, 0xcf, 0xe6, 0xe8, 0xcc, 0x81, 0x36, 0x35, 0x90, 0x83,
	0x6a, 0x37, 0x00, 0x8d, 0x4f, 0xe2, 0x2b, 0x80, 0x4b, 0x56, 0x8b, 0xb6, 0x66, 0xb9, 0x5b, 0x8c,
	0xc6, 0xec, 0xc6, 0x9c, 0x02, 0x6b, 0x8a, 0x06, 0xaa, 0xdf, 0x45, 0x41, 0x3e, 0xe6, 0xb9, 0x7c,
	0xda, 0x3f, 0xbe, 0xe8, 0x3b, 0xe0, 0xb2, 0xef, 0x80, 0x7f, 0x7d, 0x07, 0x7c, 0x1b, 0x38, 0xa5,
	0xcb, 0x81, 0x53, 0xfa, 0x33, 0x70, 0x4a, 0x6f, 0x77, 0x79, 0xa8, 0x3e, 0xa4, 0x3e, 0x0e, 0x44,
	0x97, 0x1c, 0x9d, 0xbc, 0x39, 0xdf, 0xe6, 0x1d, 0xe1, 0xd3, 0x8e, 0xf6, 0xdd, 0xce, 0x3c, 0x92,
	0x79, 0xe4, 0xfc, 0x9a, 0xbf, 0xea, 0xc5, 0x4c, 0xfa, 0x0f, 0xf4, 0x5f, 0xc5, 0xee, 0x55, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x0c, 0x27, 0xcd, 0x87, 0xe1, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ModeratorAddress returns the current moderator address
	ModeratorAddress(ctx context.Context, in *QueryModeratorAddressRequest, opts ...grpc.CallOption) (*QueryModeratorAddressResponse, error)
	// Discounts queries a denomination trace information.
	Discounts(ctx context.Context, in *QueryDiscountsRequest, opts ...grpc.CallOption) (*QueryDiscountsResponse, error)
	// Discount queries a denomination trace information.
	Discount(ctx context.Context, in *QueryDiscountRequest, opts ...grpc.CallOption) (*QueryDiscountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ModeratorAddress(ctx context.Context, in *QueryModeratorAddressRequest, opts ...grpc.CallOption) (*QueryModeratorAddressResponse, error) {
	out := new(QueryModeratorAddressResponse)
	err := c.cc.Invoke(ctx, "/guru.feepolicy.v1.Query/ModeratorAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Discounts(ctx context.Context, in *QueryDiscountsRequest, opts ...grpc.CallOption) (*QueryDiscountsResponse, error) {
	out := new(QueryDiscountsResponse)
	err := c.cc.Invoke(ctx, "/guru.feepolicy.v1.Query/Discounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Discount(ctx context.Context, in *QueryDiscountRequest, opts ...grpc.CallOption) (*QueryDiscountResponse, error) {
	out := new(QueryDiscountResponse)
	err := c.cc.Invoke(ctx, "/guru.feepolicy.v1.Query/Discount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ModeratorAddress returns the current moderator address
	ModeratorAddress(context.Context, *QueryModeratorAddressRequest) (*QueryModeratorAddressResponse, error)
	// Discounts queries a denomination trace information.
	Discounts(context.Context, *QueryDiscountsRequest) (*QueryDiscountsResponse, error)
	// Discount queries a denomination trace information.
	Discount(context.Context, *QueryDiscountRequest) (*QueryDiscountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ModeratorAddress(ctx context.Context, req *QueryModeratorAddressRequest) (*QueryModeratorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModeratorAddress not implemented")
}
func (*UnimplementedQueryServer) Discounts(ctx context.Context, req *QueryDiscountsRequest) (*QueryDiscountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discounts not implemented")
}
func (*UnimplementedQueryServer) Discount(ctx context.Context, req *QueryDiscountRequest) (*QueryDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discount not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ModeratorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModeratorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModeratorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.feepolicy.v1.Query/ModeratorAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModeratorAddress(ctx, req.(*QueryModeratorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Discounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Discounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.feepolicy.v1.Query/Discounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Discounts(ctx, req.(*QueryDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Discount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Discount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.feepolicy.v1.Query/Discount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Discount(ctx, req.(*QueryDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "guru.feepolicy.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModeratorAddress",
			Handler:    _Query_ModeratorAddress_Handler,
		},
		{
			MethodName: "Discounts",
			Handler:    _Query_Discounts_Handler,
		},
		{
			MethodName: "Discount",
			Handler:    _Query_Discount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guru/feepolicy/v1/query.proto",
}

func (m *QueryModeratorAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModeratorAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModeratorAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModeratorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModeratorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModeratorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModeratorAddress) > 0 {
		i -= len(m.ModeratorAddress)
		copy(dAtA[i:], m.ModeratorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ModeratorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDiscountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDiscountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDiscountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDiscountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDiscountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDiscountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Discounts) > 0 {
		for iNdEx := len(m.Discounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Discounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDiscountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDiscountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDiscountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDiscountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDiscountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDiscountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Discount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryModeratorAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModeratorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModeratorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDiscountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDiscountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Discounts) > 0 {
		for _, e := range m.Discounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDiscountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDiscountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Discount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryModeratorAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModeratorAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModeratorAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModeratorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModeratorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModeratorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModeratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDiscountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDiscountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDiscountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDiscountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDiscountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDiscountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Discounts = append(m.Discounts, AccountDiscount{})
			if err := m.Discounts[len(m.Discounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDiscountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDiscountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDiscountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDiscountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDiscountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDiscountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Discount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
