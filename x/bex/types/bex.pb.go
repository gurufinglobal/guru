// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guru/bex/v1/bex.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Exchange represents an exchange pair configuration between two assets.
type Exchange struct {
	// Unique identifier for this exchange pair
	Id cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=id,proto3,customtype=cosmossdk.io/math.Int" json:"id"`
	// Admin for the exchange
	AdminAddress string `protobuf:"bytes,2,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// Address where reserves are stored
	ReserveAddress string `protobuf:"bytes,3,opt,name=reserve_address,json=reserveAddress,proto3" json:"reserve_address,omitempty"`
	// First coin denomination
	DenomA    string `protobuf:"bytes,4,opt,name=denom_a,json=denomA,proto3" json:"denom_a,omitempty"`
	IbcDenomA string `protobuf:"bytes,5,opt,name=ibc_denom_a,json=ibcDenomA,proto3" json:"ibc_denom_a,omitempty"`
	PortA     string `protobuf:"bytes,6,opt,name=port_a,json=portA,proto3" json:"port_a,omitempty"`
	ChannelA  string `protobuf:"bytes,7,opt,name=channel_a,json=channelA,proto3" json:"channel_a,omitempty"`
	// Second coin denomination
	DenomB    string `protobuf:"bytes,8,opt,name=denom_b,json=denomB,proto3" json:"denom_b,omitempty"`
	IbcDenomB string `protobuf:"bytes,9,opt,name=ibc_denom_b,json=ibcDenomB,proto3" json:"ibc_denom_b,omitempty"`
	PortB     string `protobuf:"bytes,10,opt,name=port_b,json=portB,proto3" json:"port_b,omitempty"`
	ChannelB  string `protobuf:"bytes,11,opt,name=channel_b,json=channelB,proto3" json:"channel_b,omitempty"`
	// Exchange rate: 1 (in first coin) * rate = result (in second coin)
	Rate cosmossdk_io_math.LegacyDec `protobuf:"bytes,12,opt,name=rate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"rate"`
	// Fee applied to the exchange in percentage
	// If the value of fee = 0.5 => calculatedFee = exchangeAmount * 0.005
	Fee cosmossdk_io_math.LegacyDec `protobuf:"bytes,13,opt,name=fee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"fee"`
	// Maximum allowed amount for exchange operations for the first coin
	// second coin limit = limit * rate
	Limit cosmossdk_io_math.LegacyDec `protobuf:"bytes,14,opt,name=limit,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"limit"`
	// Total accumulated fee for this exchange
	// Admin can withdraw the accumulated fee to the given address
	AccumulatedFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,15,rep,name=accumulated_fee,json=accumulatedFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"accumulated_fee"`
	// oracle request id used by hook to update rate
	OracleRequestId uint64 `protobuf:"varint,16,opt,name=oracle_request_id,json=oracleRequestId,proto3" json:"oracle_request_id,omitempty"`
	// Current status of the exchange
	Status string `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	// Additional metadata for future extensibility (optional)
	Metadata map[string]string `protobuf:"bytes,18,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Exchange) Reset()         { *m = Exchange{} }
func (m *Exchange) String() string { return proto.CompactTextString(m) }
func (*Exchange) ProtoMessage()    {}
func (*Exchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_69b40bf7cbd38549, []int{0}
}
func (m *Exchange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Exchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Exchange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Exchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exchange.Merge(m, src)
}
func (m *Exchange) XXX_Size() int {
	return m.Size()
}
func (m *Exchange) XXX_DiscardUnknown() {
	xxx_messageInfo_Exchange.DiscardUnknown(m)
}

var xxx_messageInfo_Exchange proto.InternalMessageInfo

func (m *Exchange) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *Exchange) GetReserveAddress() string {
	if m != nil {
		return m.ReserveAddress
	}
	return ""
}

func (m *Exchange) GetDenomA() string {
	if m != nil {
		return m.DenomA
	}
	return ""
}

func (m *Exchange) GetIbcDenomA() string {
	if m != nil {
		return m.IbcDenomA
	}
	return ""
}

func (m *Exchange) GetPortA() string {
	if m != nil {
		return m.PortA
	}
	return ""
}

func (m *Exchange) GetChannelA() string {
	if m != nil {
		return m.ChannelA
	}
	return ""
}

func (m *Exchange) GetDenomB() string {
	if m != nil {
		return m.DenomB
	}
	return ""
}

func (m *Exchange) GetIbcDenomB() string {
	if m != nil {
		return m.IbcDenomB
	}
	return ""
}

func (m *Exchange) GetPortB() string {
	if m != nil {
		return m.PortB
	}
	return ""
}

func (m *Exchange) GetChannelB() string {
	if m != nil {
		return m.ChannelB
	}
	return ""
}

func (m *Exchange) GetAccumulatedFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.AccumulatedFee
	}
	return nil
}

func (m *Exchange) GetOracleRequestId() uint64 {
	if m != nil {
		return m.OracleRequestId
	}
	return 0
}

func (m *Exchange) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Exchange) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Ratemeter struct {
	// request for each address
	RequestCountLimit uint64 `protobuf:"varint,1,opt,name=request_count_limit,json=requestCountLimit,proto3" json:"request_count_limit,omitempty"`
	// Time window for enforcing the limit (e.g. 1h, 24h).
	RequestPeriod time.Duration `protobuf:"bytes,2,opt,name=request_period,json=requestPeriod,proto3,stdduration" json:"duration,omitempty" yaml:"duration"`
}

func (m *Ratemeter) Reset()         { *m = Ratemeter{} }
func (m *Ratemeter) String() string { return proto.CompactTextString(m) }
func (*Ratemeter) ProtoMessage()    {}
func (*Ratemeter) Descriptor() ([]byte, []int) {
	return fileDescriptor_69b40bf7cbd38549, []int{1}
}
func (m *Ratemeter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ratemeter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ratemeter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ratemeter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ratemeter.Merge(m, src)
}
func (m *Ratemeter) XXX_Size() int {
	return m.Size()
}
func (m *Ratemeter) XXX_DiscardUnknown() {
	xxx_messageInfo_Ratemeter.DiscardUnknown(m)
}

var xxx_messageInfo_Ratemeter proto.InternalMessageInfo

func (m *Ratemeter) GetRequestCountLimit() uint64 {
	if m != nil {
		return m.RequestCountLimit
	}
	return 0
}

func (m *Ratemeter) GetRequestPeriod() time.Duration {
	if m != nil {
		return m.RequestPeriod
	}
	return 0
}

type RateRegistry struct {
	// defines the number of requests from the address
	RequestCount uint64 `protobuf:"varint,1,opt,name=request_count,json=requestCount,proto3" json:"request_count,omitempty"`
	// defines the start window for counting
	StartWindow int64 `protobuf:"varint,2,opt,name=start_window,json=startWindow,proto3" json:"start_window,omitempty"`
}

func (m *RateRegistry) Reset()         { *m = RateRegistry{} }
func (m *RateRegistry) String() string { return proto.CompactTextString(m) }
func (*RateRegistry) ProtoMessage()    {}
func (*RateRegistry) Descriptor() ([]byte, []int) {
	return fileDescriptor_69b40bf7cbd38549, []int{2}
}
func (m *RateRegistry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateRegistry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateRegistry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateRegistry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateRegistry.Merge(m, src)
}
func (m *RateRegistry) XXX_Size() int {
	return m.Size()
}
func (m *RateRegistry) XXX_DiscardUnknown() {
	xxx_messageInfo_RateRegistry.DiscardUnknown(m)
}

var xxx_messageInfo_RateRegistry proto.InternalMessageInfo

func (m *RateRegistry) GetRequestCount() uint64 {
	if m != nil {
		return m.RequestCount
	}
	return 0
}

func (m *RateRegistry) GetStartWindow() int64 {
	if m != nil {
		return m.StartWindow
	}
	return 0
}

func init() {
	proto.RegisterType((*Exchange)(nil), "guru.bex.v1.Exchange")
	proto.RegisterMapType((map[string]string)(nil), "guru.bex.v1.Exchange.MetadataEntry")
	proto.RegisterType((*Ratemeter)(nil), "guru.bex.v1.Ratemeter")
	proto.RegisterType((*RateRegistry)(nil), "guru.bex.v1.RateRegistry")
}

func init() { proto.RegisterFile("guru/bex/v1/bex.proto", fileDescriptor_69b40bf7cbd38549) }

var fileDescriptor_69b40bf7cbd38549 = []byte{
	// 814 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x41, 0x8f, 0xdb, 0x44,
	0x14, 0x5e, 0x6f, 0x76, 0xb3, 0x9b, 0x49, 0xb2, 0x69, 0x86, 0x2e, 0xb8, 0x5b, 0xc9, 0x59, 0xb2,
	0x07, 0xa2, 0x40, 0x6c, 0xa5, 0x48, 0x08, 0xb5, 0x12, 0x28, 0x6e, 0x5a, 0x58, 0x54, 0xa4, 0xca,
	0x42, 0x20, 0x71, 0xb1, 0xc6, 0xf6, 0xab, 0x77, 0xb4, 0xb6, 0x27, 0x78, 0xc6, 0x69, 0xf2, 0x17,
	0x38, 0x71, 0xe0, 0x80, 0xf8, 0x05, 0x88, 0xd3, 0x1e, 0xf8, 0x11, 0x3d, 0x56, 0x9c, 0x10, 0x87,
	0x14, 0xed, 0x1e, 0x2a, 0x71, 0xe4, 0x17, 0xa0, 0x99, 0xb1, 0x77, 0x13, 0x71, 0x41, 0xea, 0xc5,
	0x9e, 0xf7, 0x7d, 0x6f, 0xde, 0xf7, 0xde, 0xbc, 0x37, 0x83, 0x0e, 0xe3, 0x22, 0x2f, 0x9c, 0x00,
	0x16, 0xce, 0x7c, 0x2c, 0x7f, 0xf6, 0x2c, 0x67, 0x82, 0xe1, 0xa6, 0x84, 0x6d, 0x69, 0xcf, 0xc7,
	0x47, 0x5d, 0x92, 0xd2, 0x8c, 0x39, 0xea, 0xab, 0xf9, 0xa3, 0xdb, 0x31, 0x8b, 0x99, 0x5a, 0x3a,
	0x72, 0x55, 0xa2, 0x56, 0xcc, 0x58, 0x9c, 0x80, 0xa3, 0xac, 0xa0, 0x78, 0xe6, 0x44, 0x45, 0x4e,
	0x04, 0x65, 0x59, 0xc5, 0x87, 0x8c, 0xa7, 0x8c, 0x3b, 0x01, 0xe1, 0xe0, 0xcc, 0xc7, 0x01, 0x08,
	0x32, 0x76, 0x42, 0x46, 0x2b, 0xfe, 0x8e, 0xe6, 0x7d, 0x1d, 0x58, 0x1b, 0x9a, 0xea, 0xff, 0xb8,
	0x87, 0xf6, 0x1f, 0x2d, 0xc2, 0x33, 0x92, 0xc5, 0x80, 0x1f, 0xa0, 0x6d, 0x1a, 0x99, 0xc6, 0xb1,
	0x31, 0x68, 0xb8, 0xef, 0xbf, 0x58, 0xf5, 0xb6, 0xfe, 0x5c, 0xf5, 0x0e, 0xb5, 0x3b, 0x8f, 0xce,
	0x6d, 0xca, 0x9c, 0x94, 0x88, 0x33, 0xfb, 0x34, 0x13, 0xbf, 0xff, 0x36, 0x42, 0x65, 0x9c, 0xd3,
	0x4c, 0x78, 0xdb, 0x34, 0xc2, 0x27, 0xa8, 0x4d, 0xa2, 0x94, 0x66, 0x3e, 0x89, 0xa2, 0x1c, 0x38,
	0x37, 0xb7, 0x65, 0x1c, 0xaf, 0xa5, 0xc0, 0x89, 0xc6, 0xf0, 0x7b, 0xa8, 0x93, 0x03, 0x87, 0x7c,
	0x0e, 0xd7, 0x6e, 0x35, 0xe5, 0x76, 0x50, 0xc2, 0x95, 0xe3, 0x3b, 0x68, 0x2f, 0x82, 0x8c, 0xa5,
	0x3e, 0x31, 0x77, 0x94, 0x43, 0x5d, 0x99, 0x13, 0x6c, 0xa1, 0x26, 0x0d, 0x42, 0xbf, 0x22, 0x77,
	0x15, 0xd9, 0xa0, 0x41, 0x38, 0xd5, 0xfc, 0x21, 0xaa, 0xcf, 0x58, 0x2e, 0x7c, 0x62, 0xd6, 0x15,
	0xb5, 0x2b, 0xad, 0x09, 0xbe, 0x8b, 0x1a, 0xb2, 0xc8, 0x0c, 0x12, 0x9f, 0x98, 0x7b, 0x8a, 0xd9,
	0x2f, 0x81, 0xc9, 0x8d, 0x58, 0x60, 0xee, 0xaf, 0x89, 0xb9, 0x9b, 0x62, 0x81, 0xd9, 0xd8, 0x14,
	0x73, 0xaf, 0xc5, 0x02, 0x13, 0xdd, 0x88, 0xb9, 0xeb, 0x62, 0x81, 0xd9, 0xdc, 0x10, 0x73, 0xf1,
	0x17, 0x68, 0x27, 0x27, 0x02, 0xcc, 0x96, 0x3a, 0xe6, 0x8f, 0xca, 0x63, 0xbe, 0xfb, 0xdf, 0x63,
	0x7e, 0x02, 0x31, 0x09, 0x97, 0x53, 0x08, 0xd7, 0x0e, 0x7b, 0x0a, 0xe1, 0x2f, 0xaf, 0x2f, 0x86,
	0x86, 0xa7, 0x62, 0xe0, 0xcf, 0x51, 0xed, 0x19, 0x80, 0xd9, 0x7e, 0xa3, 0x50, 0x32, 0x04, 0xfe,
	0x04, 0xed, 0x26, 0x34, 0xa5, 0xc2, 0x3c, 0x50, 0xb1, 0x06, 0xff, 0x23, 0x96, 0xde, 0xad, 0xb7,
	0xe1, 0xef, 0x0d, 0xd4, 0x21, 0x61, 0x58, 0xa4, 0x45, 0x42, 0x04, 0x44, 0xbe, 0x4c, 0xab, 0x73,
	0x5c, 0x1b, 0x34, 0xef, 0xdd, 0xb1, 0x4b, 0x41, 0x39, 0x9d, 0x76, 0x39, 0x9d, 0xf6, 0x43, 0x46,
	0x33, 0xf7, 0xb1, 0x54, 0xf9, 0xf5, 0x55, 0x6f, 0x10, 0x53, 0x71, 0x56, 0x04, 0x76, 0xc8, 0xd2,
	0x72, 0x3a, 0xcb, 0xdf, 0x88, 0x47, 0xe7, 0x8e, 0x58, 0xce, 0x80, 0xab, 0x0d, 0xfc, 0xe7, 0xd7,
	0x17, 0xc3, 0x56, 0xa2, 0x12, 0xf0, 0xe5, 0x7c, 0x73, 0x9d, 0xc3, 0xc1, 0x9a, 0xf2, 0x63, 0x00,
	0x3c, 0x44, 0x5d, 0x96, 0x93, 0x30, 0x01, 0x3f, 0x87, 0xef, 0x0a, 0xe0, 0xc2, 0xa7, 0x91, 0x79,
	0xeb, 0xd8, 0x18, 0xec, 0x78, 0x1d, 0x4d, 0x78, 0x1a, 0x3f, 0x8d, 0xf0, 0xdb, 0xa8, 0xce, 0x05,
	0x11, 0x05, 0x37, 0xbb, 0xba, 0xf5, 0xda, 0xc2, 0x9f, 0xa2, 0xfd, 0x14, 0x04, 0x89, 0x88, 0x20,
	0x26, 0x56, 0x85, 0x9c, 0xd8, 0x6b, 0x97, 0xd7, 0xae, 0x2e, 0x8d, 0xfd, 0x65, 0xe9, 0xf5, 0x28,
	0x13, 0xf9, 0xd2, 0xbb, 0xde, 0x74, 0xf4, 0x00, 0xb5, 0x37, 0x28, 0x7c, 0x0b, 0xd5, 0xce, 0x61,
	0xa9, 0xaf, 0x97, 0x27, 0x97, 0xf8, 0x36, 0xda, 0x9d, 0x93, 0xa4, 0x80, 0xf2, 0xaa, 0x68, 0xe3,
	0xfe, 0xf6, 0xc7, 0x46, 0xff, 0xc2, 0x40, 0x0d, 0x8f, 0x08, 0x48, 0x41, 0x40, 0x8e, 0x6d, 0xf4,
	0x56, 0x55, 0x48, 0xc8, 0x8a, 0x4c, 0xf8, 0xba, 0x55, 0x86, 0xaa, 0xa8, 0x5b, 0x52, 0x0f, 0x25,
	0xf3, 0x44, 0x35, 0x83, 0xa3, 0x83, 0xca, 0x7f, 0x06, 0x39, 0x65, 0x91, 0x12, 0x90, 0xad, 0xd0,
	0x0f, 0x89, 0x5d, 0x3d, 0x24, 0xf6, 0xb4, 0x7c, 0x48, 0xdc, 0xb1, 0x6c, 0xc5, 0xdf, 0xab, 0x1e,
	0xae, 0x9e, 0x96, 0x0f, 0x58, 0x4a, 0x05, 0xa4, 0x33, 0xb1, 0xfc, 0x67, 0xd5, 0xeb, 0x2c, 0x49,
	0x9a, 0xdc, 0xef, 0x57, 0x5c, 0xff, 0xa7, 0x57, 0x3d, 0xc3, 0x6b, 0x97, 0x1a, 0x4f, 0x95, 0x44,
	0xff, 0x6b, 0xd4, 0x92, 0x19, 0x7b, 0x10, 0x53, 0x2e, 0xcb, 0x3d, 0x41, 0xed, 0x8d, 0xa4, 0xcb,
	0x74, 0x5b, 0xeb, 0xe9, 0xe2, 0x77, 0x51, 0x8b, 0x0b, 0x92, 0x0b, 0xff, 0x39, 0xcd, 0x22, 0xf6,
	0x5c, 0xe5, 0x59, 0xf3, 0x9a, 0x0a, 0xfb, 0x46, 0x41, 0xee, 0xf4, 0xc5, 0xa5, 0x65, 0xbc, 0xbc,
	0xb4, 0x8c, 0xbf, 0x2e, 0x2d, 0xe3, 0x87, 0x2b, 0x6b, 0xeb, 0xe5, 0x95, 0xb5, 0xf5, 0xc7, 0x95,
	0xb5, 0xf5, 0xed, 0x70, 0x6d, 0x6c, 0x3e, 0x7b, 0xfa, 0xd5, 0x62, 0x14, 0x27, 0x2c, 0x20, 0x89,
	0x23, 0xdb, 0x34, 0x9a, 0xdf, 0x73, 0x16, 0xea, 0xfd, 0x55, 0xe3, 0x13, 0xd4, 0x55, 0xc9, 0x1f,
	0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x19, 0x5d, 0x7a, 0x46, 0x98, 0x05, 0x00, 0x00,
}

func (m *Exchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Exchange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Exchange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBex(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintBex(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintBex(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBex(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.OracleRequestId != 0 {
		i = encodeVarintBex(dAtA, i, uint64(m.OracleRequestId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.AccumulatedFee) > 0 {
		for iNdEx := len(m.AccumulatedFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccumulatedFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBex(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	{
		size := m.Limit.Size()
		i -= size
		if _, err := m.Limit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBex(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.Fee.Size()
		i -= size
		if _, err := m.Fee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBex(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBex(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if len(m.ChannelB) > 0 {
		i -= len(m.ChannelB)
		copy(dAtA[i:], m.ChannelB)
		i = encodeVarintBex(dAtA, i, uint64(len(m.ChannelB)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PortB) > 0 {
		i -= len(m.PortB)
		copy(dAtA[i:], m.PortB)
		i = encodeVarintBex(dAtA, i, uint64(len(m.PortB)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.IbcDenomB) > 0 {
		i -= len(m.IbcDenomB)
		copy(dAtA[i:], m.IbcDenomB)
		i = encodeVarintBex(dAtA, i, uint64(len(m.IbcDenomB)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DenomB) > 0 {
		i -= len(m.DenomB)
		copy(dAtA[i:], m.DenomB)
		i = encodeVarintBex(dAtA, i, uint64(len(m.DenomB)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ChannelA) > 0 {
		i -= len(m.ChannelA)
		copy(dAtA[i:], m.ChannelA)
		i = encodeVarintBex(dAtA, i, uint64(len(m.ChannelA)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PortA) > 0 {
		i -= len(m.PortA)
		copy(dAtA[i:], m.PortA)
		i = encodeVarintBex(dAtA, i, uint64(len(m.PortA)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IbcDenomA) > 0 {
		i -= len(m.IbcDenomA)
		copy(dAtA[i:], m.IbcDenomA)
		i = encodeVarintBex(dAtA, i, uint64(len(m.IbcDenomA)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DenomA) > 0 {
		i -= len(m.DenomA)
		copy(dAtA[i:], m.DenomA)
		i = encodeVarintBex(dAtA, i, uint64(len(m.DenomA)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintBex(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintBex(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Id.Size()
		i -= size
		if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBex(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Ratemeter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ratemeter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ratemeter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.RequestPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.RequestPeriod):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintBex(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if m.RequestCountLimit != 0 {
		i = encodeVarintBex(dAtA, i, uint64(m.RequestCountLimit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RateRegistry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateRegistry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateRegistry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartWindow != 0 {
		i = encodeVarintBex(dAtA, i, uint64(m.StartWindow))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestCount != 0 {
		i = encodeVarintBex(dAtA, i, uint64(m.RequestCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBex(dAtA []byte, offset int, v uint64) int {
	offset -= sovBex(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Exchange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovBex(uint64(l))
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovBex(uint64(l))
	}
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovBex(uint64(l))
	}
	l = len(m.DenomA)
	if l > 0 {
		n += 1 + l + sovBex(uint64(l))
	}
	l = len(m.IbcDenomA)
	if l > 0 {
		n += 1 + l + sovBex(uint64(l))
	}
	l = len(m.PortA)
	if l > 0 {
		n += 1 + l + sovBex(uint64(l))
	}
	l = len(m.ChannelA)
	if l > 0 {
		n += 1 + l + sovBex(uint64(l))
	}
	l = len(m.DenomB)
	if l > 0 {
		n += 1 + l + sovBex(uint64(l))
	}
	l = len(m.IbcDenomB)
	if l > 0 {
		n += 1 + l + sovBex(uint64(l))
	}
	l = len(m.PortB)
	if l > 0 {
		n += 1 + l + sovBex(uint64(l))
	}
	l = len(m.ChannelB)
	if l > 0 {
		n += 1 + l + sovBex(uint64(l))
	}
	l = m.Rate.Size()
	n += 1 + l + sovBex(uint64(l))
	l = m.Fee.Size()
	n += 1 + l + sovBex(uint64(l))
	l = m.Limit.Size()
	n += 1 + l + sovBex(uint64(l))
	if len(m.AccumulatedFee) > 0 {
		for _, e := range m.AccumulatedFee {
			l = e.Size()
			n += 1 + l + sovBex(uint64(l))
		}
	}
	if m.OracleRequestId != 0 {
		n += 2 + sovBex(uint64(m.OracleRequestId))
	}
	l = len(m.Status)
	if l > 0 {
		n += 2 + l + sovBex(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBex(uint64(len(k))) + 1 + len(v) + sovBex(uint64(len(v)))
			n += mapEntrySize + 2 + sovBex(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Ratemeter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestCountLimit != 0 {
		n += 1 + sovBex(uint64(m.RequestCountLimit))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.RequestPeriod)
	n += 1 + l + sovBex(uint64(l))
	return n
}

func (m *RateRegistry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestCount != 0 {
		n += 1 + sovBex(uint64(m.RequestCount))
	}
	if m.StartWindow != 0 {
		n += 1 + sovBex(uint64(m.StartWindow))
	}
	return n
}

func sovBex(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBex(x uint64) (n int) {
	return sovBex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Exchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Exchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Exchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenomA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcDenomA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenomB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcDenomB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Limit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumulatedFee = append(m.AccumulatedFee, types.Coin{})
			if err := m.AccumulatedFee[len(m.AccumulatedFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleRequestId", wireType)
			}
			m.OracleRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBex
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBex
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBex
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBex
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBex(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBex
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ratemeter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ratemeter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ratemeter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCountLimit", wireType)
			}
			m.RequestCountLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestCountLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBex
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.RequestPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateRegistry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateRegistry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateRegistry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCount", wireType)
			}
			m.RequestCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartWindow", wireType)
			}
			m.StartWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartWindow |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBex
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBex
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBex
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBex        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBex          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBex = fmt.Errorf("proto: unexpected end of group")
)
