// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guru/bex/v1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Request type for the Query/ModeratorAddress RPC method.
type QueryModeratorAddressRequest struct {
}

func (m *QueryModeratorAddressRequest) Reset()         { *m = QueryModeratorAddressRequest{} }
func (m *QueryModeratorAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModeratorAddressRequest) ProtoMessage()    {}
func (*QueryModeratorAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9cb0b2816bd3b9, []int{0}
}
func (m *QueryModeratorAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModeratorAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModeratorAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModeratorAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModeratorAddressRequest.Merge(m, src)
}
func (m *QueryModeratorAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModeratorAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModeratorAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModeratorAddressRequest proto.InternalMessageInfo

// Response type for the Query/ModeratorAddress RPC method.
type QueryModeratorAddressResponse struct {
	ModeratorAddress string `protobuf:"bytes,1,opt,name=moderator_address,json=moderatorAddress,proto3" json:"moderator_address,omitempty"`
}

func (m *QueryModeratorAddressResponse) Reset()         { *m = QueryModeratorAddressResponse{} }
func (m *QueryModeratorAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModeratorAddressResponse) ProtoMessage()    {}
func (*QueryModeratorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9cb0b2816bd3b9, []int{1}
}
func (m *QueryModeratorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModeratorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModeratorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModeratorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModeratorAddressResponse.Merge(m, src)
}
func (m *QueryModeratorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModeratorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModeratorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModeratorAddressResponse proto.InternalMessageInfo

func (m *QueryModeratorAddressResponse) GetModeratorAddress() string {
	if m != nil {
		return m.ModeratorAddress
	}
	return ""
}

// Request type for the Query/Exchanges RPC method.
type QueryExchangesRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryExchangesRequest) Reset()         { *m = QueryExchangesRequest{} }
func (m *QueryExchangesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExchangesRequest) ProtoMessage()    {}
func (*QueryExchangesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9cb0b2816bd3b9, []int{2}
}
func (m *QueryExchangesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangesRequest.Merge(m, src)
}
func (m *QueryExchangesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangesRequest proto.InternalMessageInfo

func (m *QueryExchangesRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Response type for the Query/Exchanges RPC method.
type QueryExchangesResponse struct {
	Exchanges []Exchange `protobuf:"bytes,1,rep,name=exchanges,proto3" json:"exchanges"`
}

func (m *QueryExchangesResponse) Reset()         { *m = QueryExchangesResponse{} }
func (m *QueryExchangesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExchangesResponse) ProtoMessage()    {}
func (*QueryExchangesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9cb0b2816bd3b9, []int{3}
}
func (m *QueryExchangesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangesResponse.Merge(m, src)
}
func (m *QueryExchangesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangesResponse proto.InternalMessageInfo

func (m *QueryExchangesResponse) GetExchanges() []Exchange {
	if m != nil {
		return m.Exchanges
	}
	return nil
}

// Request type for the Query/IsAdmin RPC method.
type QueryIsAdminRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryIsAdminRequest) Reset()         { *m = QueryIsAdminRequest{} }
func (m *QueryIsAdminRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsAdminRequest) ProtoMessage()    {}
func (*QueryIsAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9cb0b2816bd3b9, []int{4}
}
func (m *QueryIsAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsAdminRequest.Merge(m, src)
}
func (m *QueryIsAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsAdminRequest proto.InternalMessageInfo

func (m *QueryIsAdminRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Response type for the Query/IsAdmin RPC method.
type QueryIsAdminResponse struct {
	IsAdmin bool `protobuf:"varint,1,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
}

func (m *QueryIsAdminResponse) Reset()         { *m = QueryIsAdminResponse{} }
func (m *QueryIsAdminResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsAdminResponse) ProtoMessage()    {}
func (*QueryIsAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9cb0b2816bd3b9, []int{5}
}
func (m *QueryIsAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsAdminResponse.Merge(m, src)
}
func (m *QueryIsAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsAdminResponse proto.InternalMessageInfo

func (m *QueryIsAdminResponse) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

// Request type for the Query/NextExchangeId RPC method.
type QueryNextExchangeIdRequest struct {
}

func (m *QueryNextExchangeIdRequest) Reset()         { *m = QueryNextExchangeIdRequest{} }
func (m *QueryNextExchangeIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextExchangeIdRequest) ProtoMessage()    {}
func (*QueryNextExchangeIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9cb0b2816bd3b9, []int{6}
}
func (m *QueryNextExchangeIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextExchangeIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextExchangeIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextExchangeIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextExchangeIdRequest.Merge(m, src)
}
func (m *QueryNextExchangeIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextExchangeIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextExchangeIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextExchangeIdRequest proto.InternalMessageInfo

// Response type for the Query/NextExchangeId RPC method.
type QueryNextExchangeIdResponse struct {
	Id cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=id,proto3,customtype=cosmossdk.io/math.Int" json:"id"`
}

func (m *QueryNextExchangeIdResponse) Reset()         { *m = QueryNextExchangeIdResponse{} }
func (m *QueryNextExchangeIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextExchangeIdResponse) ProtoMessage()    {}
func (*QueryNextExchangeIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9cb0b2816bd3b9, []int{7}
}
func (m *QueryNextExchangeIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextExchangeIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextExchangeIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextExchangeIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextExchangeIdResponse.Merge(m, src)
}
func (m *QueryNextExchangeIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextExchangeIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextExchangeIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextExchangeIdResponse proto.InternalMessageInfo

// Request type for the Query/Ratemeter RPC method.
type QueryRatemeterRequest struct {
}

func (m *QueryRatemeterRequest) Reset()         { *m = QueryRatemeterRequest{} }
func (m *QueryRatemeterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRatemeterRequest) ProtoMessage()    {}
func (*QueryRatemeterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9cb0b2816bd3b9, []int{8}
}
func (m *QueryRatemeterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRatemeterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRatemeterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRatemeterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRatemeterRequest.Merge(m, src)
}
func (m *QueryRatemeterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRatemeterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRatemeterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRatemeterRequest proto.InternalMessageInfo

// Response type for the Query/Ratemeter RPC method.
type QueryRatemeterResponse struct {
	Ratemeter Ratemeter `protobuf:"bytes,1,opt,name=ratemeter,proto3" json:"ratemeter"`
}

func (m *QueryRatemeterResponse) Reset()         { *m = QueryRatemeterResponse{} }
func (m *QueryRatemeterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRatemeterResponse) ProtoMessage()    {}
func (*QueryRatemeterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c9cb0b2816bd3b9, []int{9}
}
func (m *QueryRatemeterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRatemeterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRatemeterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRatemeterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRatemeterResponse.Merge(m, src)
}
func (m *QueryRatemeterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRatemeterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRatemeterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRatemeterResponse proto.InternalMessageInfo

func (m *QueryRatemeterResponse) GetRatemeter() Ratemeter {
	if m != nil {
		return m.Ratemeter
	}
	return Ratemeter{}
}

func init() {
	proto.RegisterType((*QueryModeratorAddressRequest)(nil), "guru.bex.v1.QueryModeratorAddressRequest")
	proto.RegisterType((*QueryModeratorAddressResponse)(nil), "guru.bex.v1.QueryModeratorAddressResponse")
	proto.RegisterType((*QueryExchangesRequest)(nil), "guru.bex.v1.QueryExchangesRequest")
	proto.RegisterType((*QueryExchangesResponse)(nil), "guru.bex.v1.QueryExchangesResponse")
	proto.RegisterType((*QueryIsAdminRequest)(nil), "guru.bex.v1.QueryIsAdminRequest")
	proto.RegisterType((*QueryIsAdminResponse)(nil), "guru.bex.v1.QueryIsAdminResponse")
	proto.RegisterType((*QueryNextExchangeIdRequest)(nil), "guru.bex.v1.QueryNextExchangeIdRequest")
	proto.RegisterType((*QueryNextExchangeIdResponse)(nil), "guru.bex.v1.QueryNextExchangeIdResponse")
	proto.RegisterType((*QueryRatemeterRequest)(nil), "guru.bex.v1.QueryRatemeterRequest")
	proto.RegisterType((*QueryRatemeterResponse)(nil), "guru.bex.v1.QueryRatemeterResponse")
}

func init() { proto.RegisterFile("guru/bex/v1/query.proto", fileDescriptor_1c9cb0b2816bd3b9) }

var fileDescriptor_1c9cb0b2816bd3b9 = []byte{
	// 613 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xc1, 0x6f, 0x12, 0x4f,
	0x18, 0x65, 0xf9, 0xfd, 0x2a, 0x65, 0x48, 0x9a, 0x3a, 0x16, 0x4a, 0x57, 0xba, 0xe0, 0x1a, 0x2d,
	0xb6, 0x61, 0x27, 0xe0, 0x49, 0x3d, 0x95, 0x68, 0x0c, 0x89, 0x1a, 0xc5, 0x9e, 0x7a, 0x21, 0x0b,
	0x3b, 0x59, 0x36, 0xb2, 0x3b, 0x74, 0x67, 0x20, 0xdb, 0x18, 0x2f, 0x1e, 0x8d, 0x07, 0x8d, 0xff,
	0x8a, 0x7f, 0x44, 0x8f, 0x8d, 0x5e, 0x8c, 0x87, 0xc6, 0x80, 0x7f, 0x88, 0xd9, 0xd9, 0x99, 0x2d,
	0x0b, 0x14, 0xbd, 0x31, 0xdf, 0xf7, 0xbe, 0xef, 0xbd, 0x79, 0xf3, 0x58, 0xb0, 0x6d, 0x8f, 0xfc,
	0x11, 0xea, 0xe2, 0x00, 0x8d, 0xeb, 0xe8, 0x64, 0x84, 0xfd, 0x53, 0x63, 0xe8, 0x13, 0x46, 0x60,
	0x2e, 0x6c, 0x18, 0x5d, 0x1c, 0x18, 0xe3, 0xba, 0x9a, 0x9f, 0x45, 0x85, 0x35, 0x8e, 0x51, 0x77,
	0x7a, 0x84, 0xba, 0x84, 0x76, 0xf8, 0x09, 0x45, 0x07, 0xd1, 0xda, 0xb2, 0x89, 0x4d, 0xa2, 0x7a,
	0xf8, 0x4b, 0x54, 0x4b, 0x36, 0x21, 0xf6, 0x00, 0x23, 0x73, 0xe8, 0x20, 0xd3, 0xf3, 0x08, 0x33,
	0x99, 0x43, 0x3c, 0x31, 0xa3, 0x6b, 0xa0, 0xf4, 0x2a, 0x54, 0xf0, 0x9c, 0x58, 0xd8, 0x37, 0x19,
	0xf1, 0x0f, 0x2d, 0xcb, 0xc7, 0x94, 0xb6, 0xf1, 0xc9, 0x08, 0x53, 0xa6, 0x3f, 0x03, 0xbb, 0x57,
	0xf4, 0xe9, 0x90, 0x78, 0x14, 0xc3, 0x03, 0x70, 0xdd, 0x95, 0xbd, 0x8e, 0x19, 0x35, 0x8b, 0x4a,
	0x45, 0xa9, 0x66, 0xdb, 0x9b, 0xee, 0xdc, 0x90, 0xbe, 0x07, 0xf2, 0x7c, 0xdb, 0x93, 0xa0, 0xd7,
	0x37, 0x3d, 0x1b, 0x4b, 0x1a, 0xb8, 0x01, 0xd2, 0x8e, 0x25, 0xc6, 0xd2, 0x8e, 0xa5, 0xbf, 0x06,
	0x85, 0x79, 0xa0, 0xe0, 0x7b, 0x00, 0xb2, 0x58, 0x16, 0x8b, 0x4a, 0xe5, 0xbf, 0x6a, 0xae, 0x91,
	0x37, 0x66, 0x7c, 0x33, 0xe4, 0x48, 0xf3, 0xff, 0xb3, 0x8b, 0x72, 0xaa, 0x7d, 0x89, 0xd6, 0x11,
	0xb8, 0xc1, 0x97, 0xb6, 0xe8, 0xa1, 0xe5, 0x3a, 0x9e, 0xe4, 0x2e, 0x82, 0x4c, 0x52, 0xb7, 0x3c,
	0xea, 0x75, 0xb0, 0x95, 0x1c, 0x10, 0x1a, 0x76, 0xc0, 0xba, 0x43, 0x3b, 0x66, 0x58, 0xe3, 0x23,
	0xeb, 0xed, 0x8c, 0x13, 0x41, 0xf4, 0x12, 0x50, 0xf9, 0xc8, 0x0b, 0x1c, 0x30, 0xa9, 0xa4, 0x65,
	0x49, 0x37, 0x8f, 0xc1, 0xcd, 0xa5, 0x5d, 0xb1, 0xf7, 0xd1, 0xa5, 0x0b, 0xcd, 0x83, 0x50, 0xfd,
	0xcf, 0x8b, 0x72, 0x3e, 0x7a, 0x62, 0x6a, 0xbd, 0x31, 0x1c, 0x82, 0x5c, 0x93, 0xf5, 0x8d, 0x96,
	0xc7, 0xbe, 0x7d, 0xad, 0x01, 0xf1, 0xf6, 0x2d, 0x8f, 0x71, 0xcb, 0xb6, 0x85, 0xb7, 0x6d, 0x93,
	0x61, 0x17, 0x33, 0xec, 0x4b, 0xd2, 0x23, 0xe1, 0xe5, 0x4c, 0x43, 0xf0, 0x3d, 0x04, 0x59, 0x5f,
	0x16, 0x39, 0x6d, 0xae, 0x51, 0x48, 0x78, 0x19, 0x8f, 0x48, 0x33, 0x63, 0x78, 0xe3, 0xe3, 0x1a,
	0x58, 0xe3, 0x6b, 0xe1, 0x67, 0x05, 0x6c, 0xce, 0xc7, 0x03, 0xde, 0x4b, 0xec, 0x59, 0x15, 0x31,
	0x75, 0xff, 0x5f, 0xa0, 0x91, 0x62, 0xfd, 0xee, 0xfb, 0xef, 0xbf, 0xbf, 0xa4, 0x2b, 0x50, 0x43,
	0xb3, 0xff, 0x8e, 0x85, 0x00, 0x42, 0x06, 0xb2, 0x71, 0x74, 0xa0, 0xbe, 0x48, 0x30, 0x1f, 0x40,
	0xf5, 0xf6, 0x4a, 0x8c, 0x60, 0xd7, 0x38, 0x7b, 0x11, 0x16, 0x12, 0xec, 0x71, 0xc0, 0xe0, 0x18,
	0x64, 0x44, 0x54, 0x60, 0x65, 0x71, 0x5f, 0x32, 0x76, 0xea, 0xad, 0x15, 0x88, 0x95, 0xb7, 0x75,
	0x28, 0x4f, 0x1e, 0x7a, 0x2b, 0x2e, 0xfb, 0x0e, 0x7e, 0x50, 0xc0, 0x46, 0x32, 0x52, 0x70, 0x6f,
	0x71, 0xfb, 0xd2, 0x48, 0xaa, 0xd5, 0xbf, 0x03, 0x85, 0x9a, 0x3b, 0x5c, 0x4d, 0x19, 0xee, 0x26,
	0xd4, 0x78, 0x38, 0x60, 0x1d, 0x69, 0x41, 0xc7, 0xb1, 0x42, 0xeb, 0xe3, 0xd8, 0x2c, 0xb3, 0x7e,
	0x3e, 0x9f, 0xcb, 0xac, 0x5f, 0x88, 0xea, 0x15, 0xd6, 0xc7, 0x71, 0x6c, 0x3e, 0x3e, 0x9b, 0x68,
	0xca, 0xf9, 0x44, 0x53, 0x7e, 0x4d, 0x34, 0xe5, 0xd3, 0x54, 0x4b, 0x9d, 0x4f, 0xb5, 0xd4, 0x8f,
	0xa9, 0x96, 0x3a, 0xde, 0xb7, 0x1d, 0xd6, 0x1f, 0x75, 0x8d, 0x1e, 0x71, 0xd1, 0xd3, 0x97, 0x47,
	0x41, 0xcd, 0x1e, 0x90, 0xae, 0x39, 0xe0, 0x7b, 0x6a, 0xe3, 0x06, 0x0a, 0xf8, 0x32, 0x76, 0x3a,
	0xc4, 0xb4, 0x7b, 0x8d, 0x7f, 0x14, 0xef, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x10, 0x67, 0xb9,
	0x6c, 0xa2, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ModeratorAddress returns the current moderator address
	ModeratorAddress(ctx context.Context, in *QueryModeratorAddressRequest, opts ...grpc.CallOption) (*QueryModeratorAddressResponse, error)
	// Exchanges returns the list of available exchanges
	// Or one exchange by given id
	Exchanges(ctx context.Context, in *QueryExchangesRequest, opts ...grpc.CallOption) (*QueryExchangesResponse, error)
	// IsAdmin checks if the given address is admin
	IsAdmin(ctx context.Context, in *QueryIsAdminRequest, opts ...grpc.CallOption) (*QueryIsAdminResponse, error)
	// NextExchangeId returns the id for the new exchange to be created next
	NextExchangeId(ctx context.Context, in *QueryNextExchangeIdRequest, opts ...grpc.CallOption) (*QueryNextExchangeIdResponse, error)
	// Ratemeter returns the current ratemeter state
	Ratemeter(ctx context.Context, in *QueryRatemeterRequest, opts ...grpc.CallOption) (*QueryRatemeterResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ModeratorAddress(ctx context.Context, in *QueryModeratorAddressRequest, opts ...grpc.CallOption) (*QueryModeratorAddressResponse, error) {
	out := new(QueryModeratorAddressResponse)
	err := c.cc.Invoke(ctx, "/guru.bex.v1.Query/ModeratorAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Exchanges(ctx context.Context, in *QueryExchangesRequest, opts ...grpc.CallOption) (*QueryExchangesResponse, error) {
	out := new(QueryExchangesResponse)
	err := c.cc.Invoke(ctx, "/guru.bex.v1.Query/Exchanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsAdmin(ctx context.Context, in *QueryIsAdminRequest, opts ...grpc.CallOption) (*QueryIsAdminResponse, error) {
	out := new(QueryIsAdminResponse)
	err := c.cc.Invoke(ctx, "/guru.bex.v1.Query/IsAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextExchangeId(ctx context.Context, in *QueryNextExchangeIdRequest, opts ...grpc.CallOption) (*QueryNextExchangeIdResponse, error) {
	out := new(QueryNextExchangeIdResponse)
	err := c.cc.Invoke(ctx, "/guru.bex.v1.Query/NextExchangeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ratemeter(ctx context.Context, in *QueryRatemeterRequest, opts ...grpc.CallOption) (*QueryRatemeterResponse, error) {
	out := new(QueryRatemeterResponse)
	err := c.cc.Invoke(ctx, "/guru.bex.v1.Query/Ratemeter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ModeratorAddress returns the current moderator address
	ModeratorAddress(context.Context, *QueryModeratorAddressRequest) (*QueryModeratorAddressResponse, error)
	// Exchanges returns the list of available exchanges
	// Or one exchange by given id
	Exchanges(context.Context, *QueryExchangesRequest) (*QueryExchangesResponse, error)
	// IsAdmin checks if the given address is admin
	IsAdmin(context.Context, *QueryIsAdminRequest) (*QueryIsAdminResponse, error)
	// NextExchangeId returns the id for the new exchange to be created next
	NextExchangeId(context.Context, *QueryNextExchangeIdRequest) (*QueryNextExchangeIdResponse, error)
	// Ratemeter returns the current ratemeter state
	Ratemeter(context.Context, *QueryRatemeterRequest) (*QueryRatemeterResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ModeratorAddress(ctx context.Context, req *QueryModeratorAddressRequest) (*QueryModeratorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModeratorAddress not implemented")
}
func (*UnimplementedQueryServer) Exchanges(ctx context.Context, req *QueryExchangesRequest) (*QueryExchangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exchanges not implemented")
}
func (*UnimplementedQueryServer) IsAdmin(ctx context.Context, req *QueryIsAdminRequest) (*QueryIsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAdmin not implemented")
}
func (*UnimplementedQueryServer) NextExchangeId(ctx context.Context, req *QueryNextExchangeIdRequest) (*QueryNextExchangeIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextExchangeId not implemented")
}
func (*UnimplementedQueryServer) Ratemeter(ctx context.Context, req *QueryRatemeterRequest) (*QueryRatemeterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ratemeter not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ModeratorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModeratorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModeratorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.bex.v1.Query/ModeratorAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModeratorAddress(ctx, req.(*QueryModeratorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Exchanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Exchanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.bex.v1.Query/Exchanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Exchanges(ctx, req.(*QueryExchangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.bex.v1.Query/IsAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsAdmin(ctx, req.(*QueryIsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextExchangeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextExchangeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextExchangeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.bex.v1.Query/NextExchangeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextExchangeId(ctx, req.(*QueryNextExchangeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ratemeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRatemeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ratemeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.bex.v1.Query/Ratemeter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ratemeter(ctx, req.(*QueryRatemeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "guru.bex.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModeratorAddress",
			Handler:    _Query_ModeratorAddress_Handler,
		},
		{
			MethodName: "Exchanges",
			Handler:    _Query_Exchanges_Handler,
		},
		{
			MethodName: "IsAdmin",
			Handler:    _Query_IsAdmin_Handler,
		},
		{
			MethodName: "NextExchangeId",
			Handler:    _Query_NextExchangeId_Handler,
		},
		{
			MethodName: "Ratemeter",
			Handler:    _Query_Ratemeter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guru/bex/v1/query.proto",
}

func (m *QueryModeratorAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModeratorAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModeratorAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModeratorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModeratorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModeratorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModeratorAddress) > 0 {
		i -= len(m.ModeratorAddress)
		copy(dAtA[i:], m.ModeratorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ModeratorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExchangesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExchangesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Exchanges) > 0 {
		for iNdEx := len(m.Exchanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Exchanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAdmin {
		i--
		if m.IsAdmin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextExchangeIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextExchangeIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextExchangeIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNextExchangeIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextExchangeIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextExchangeIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Id.Size()
		i -= size
		if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRatemeterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRatemeterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRatemeterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRatemeterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRatemeterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRatemeterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Ratemeter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryModeratorAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModeratorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModeratorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExchangesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExchangesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Exchanges) > 0 {
		for _, e := range m.Exchanges {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryIsAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsAdmin {
		n += 2
	}
	return n
}

func (m *QueryNextExchangeIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNextExchangeIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRatemeterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRatemeterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Ratemeter.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryModeratorAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModeratorAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModeratorAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModeratorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModeratorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModeratorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModeratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exchanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exchanges = append(m.Exchanges, Exchange{})
			if err := m.Exchanges[len(m.Exchanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdmin = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextExchangeIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextExchangeIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextExchangeIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextExchangeIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextExchangeIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextExchangeIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRatemeterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRatemeterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRatemeterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRatemeterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRatemeterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRatemeterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratemeter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ratemeter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
