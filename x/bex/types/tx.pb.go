// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guru/bex/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// msg declaration for registering admin.
type MsgRegisterAdmin struct {
	ModeratorAddress string `protobuf:"bytes,1,opt,name=moderator_address,json=moderatorAddress,proto3" json:"moderator_address,omitempty"`
	// new admin address
	AdminAddress string                `protobuf:"bytes,2,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	ExchangeId   cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=exchange_id,json=exchangeId,proto3,customtype=cosmossdk.io/math.Int" json:"exchange_id"`
}

func (m *MsgRegisterAdmin) Reset()         { *m = MsgRegisterAdmin{} }
func (m *MsgRegisterAdmin) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAdmin) ProtoMessage()    {}
func (*MsgRegisterAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_475155718c1b701a, []int{0}
}
func (m *MsgRegisterAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAdmin.Merge(m, src)
}
func (m *MsgRegisterAdmin) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAdmin proto.InternalMessageInfo

// Response type for the Msg/RegisterAdmin.
type MsgRegisterAdminResponse struct {
}

func (m *MsgRegisterAdminResponse) Reset()         { *m = MsgRegisterAdminResponse{} }
func (m *MsgRegisterAdminResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAdminResponse) ProtoMessage()    {}
func (*MsgRegisterAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_475155718c1b701a, []int{1}
}
func (m *MsgRegisterAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAdminResponse.Merge(m, src)
}
func (m *MsgRegisterAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAdminResponse proto.InternalMessageInfo

// msg declaration for registering admin.
type MsgRemoveAdmin struct {
	ModeratorAddress string `protobuf:"bytes,1,opt,name=moderator_address,json=moderatorAddress,proto3" json:"moderator_address,omitempty"`
	// admin address to remove
	AdminAddress string `protobuf:"bytes,2,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
}

func (m *MsgRemoveAdmin) Reset()         { *m = MsgRemoveAdmin{} }
func (m *MsgRemoveAdmin) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveAdmin) ProtoMessage()    {}
func (*MsgRemoveAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_475155718c1b701a, []int{2}
}
func (m *MsgRemoveAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveAdmin.Merge(m, src)
}
func (m *MsgRemoveAdmin) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveAdmin proto.InternalMessageInfo

// Response type for the Msg/RegisterAdmin.
type MsgRemoveAdminResponse struct {
}

func (m *MsgRemoveAdminResponse) Reset()         { *m = MsgRemoveAdminResponse{} }
func (m *MsgRemoveAdminResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveAdminResponse) ProtoMessage()    {}
func (*MsgRemoveAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_475155718c1b701a, []int{3}
}
func (m *MsgRemoveAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveAdminResponse.Merge(m, src)
}
func (m *MsgRemoveAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveAdminResponse proto.InternalMessageInfo

// msg declaration for registering admin.
type MsgRegisterExchange struct {
	AdminAddress string `protobuf:"bytes,1,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// exchange
	Exchange *Exchange `protobuf:"bytes,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
}

func (m *MsgRegisterExchange) Reset()         { *m = MsgRegisterExchange{} }
func (m *MsgRegisterExchange) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterExchange) ProtoMessage()    {}
func (*MsgRegisterExchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_475155718c1b701a, []int{4}
}
func (m *MsgRegisterExchange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterExchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterExchange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterExchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterExchange.Merge(m, src)
}
func (m *MsgRegisterExchange) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterExchange) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterExchange.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterExchange proto.InternalMessageInfo

// Response type for the Msg/RegisterAdmin.
type MsgRegisterExchangeResponse struct {
}

func (m *MsgRegisterExchangeResponse) Reset()         { *m = MsgRegisterExchangeResponse{} }
func (m *MsgRegisterExchangeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterExchangeResponse) ProtoMessage()    {}
func (*MsgRegisterExchangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_475155718c1b701a, []int{5}
}
func (m *MsgRegisterExchangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterExchangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterExchangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterExchangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterExchangeResponse.Merge(m, src)
}
func (m *MsgRegisterExchangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterExchangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterExchangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterExchangeResponse proto.InternalMessageInfo

// msg declaration for updating the rate.
type MsgUpdateExchange struct {
	AdminAddress string `protobuf:"bytes,1,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// exchnage id
	ExchangeId cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=exchange_id,json=exchangeId,proto3,customtype=cosmossdk.io/math.Int" json:"exchange_id"`
	// key to udpate
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// new value
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MsgUpdateExchange) Reset()         { *m = MsgUpdateExchange{} }
func (m *MsgUpdateExchange) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateExchange) ProtoMessage()    {}
func (*MsgUpdateExchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_475155718c1b701a, []int{6}
}
func (m *MsgUpdateExchange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateExchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateExchange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateExchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateExchange.Merge(m, src)
}
func (m *MsgUpdateExchange) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateExchange) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateExchange.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateExchange proto.InternalMessageInfo

// Response type for the Msg/UpdateRate.
type MsgUpdateExchangeResponse struct {
}

func (m *MsgUpdateExchangeResponse) Reset()         { *m = MsgUpdateExchangeResponse{} }
func (m *MsgUpdateExchangeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateExchangeResponse) ProtoMessage()    {}
func (*MsgUpdateExchangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_475155718c1b701a, []int{7}
}
func (m *MsgUpdateExchangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateExchangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateExchangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateExchangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateExchangeResponse.Merge(m, src)
}
func (m *MsgUpdateExchangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateExchangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateExchangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateExchangeResponse proto.InternalMessageInfo

// msg declaration for updating the rate.
type MsgUpdateRatemeter struct {
	ModeratorAddress string `protobuf:"bytes,1,opt,name=moderator_address,json=moderatorAddress,proto3" json:"moderator_address,omitempty"`
	// ratemeter
	Ratemeter *Ratemeter `protobuf:"bytes,2,opt,name=ratemeter,proto3" json:"ratemeter,omitempty"`
}

func (m *MsgUpdateRatemeter) Reset()         { *m = MsgUpdateRatemeter{} }
func (m *MsgUpdateRatemeter) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRatemeter) ProtoMessage()    {}
func (*MsgUpdateRatemeter) Descriptor() ([]byte, []int) {
	return fileDescriptor_475155718c1b701a, []int{8}
}
func (m *MsgUpdateRatemeter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRatemeter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRatemeter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRatemeter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRatemeter.Merge(m, src)
}
func (m *MsgUpdateRatemeter) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRatemeter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRatemeter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRatemeter proto.InternalMessageInfo

// Response type for the Msg/UpdateRate.
type MsgUpdateRatemeterResponse struct {
}

func (m *MsgUpdateRatemeterResponse) Reset()         { *m = MsgUpdateRatemeterResponse{} }
func (m *MsgUpdateRatemeterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRatemeterResponse) ProtoMessage()    {}
func (*MsgUpdateRatemeterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_475155718c1b701a, []int{9}
}
func (m *MsgUpdateRatemeterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRatemeterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRatemeterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRatemeterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRatemeterResponse.Merge(m, src)
}
func (m *MsgUpdateRatemeterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRatemeterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRatemeterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRatemeterResponse proto.InternalMessageInfo

// msg declaration for withdrawing the collected fees.
type MsgWithdrawFees struct {
	AdminAddress string `protobuf:"bytes,1,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// ID for the existing coin pair
	ExchangeId      cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=exchange_id,json=exchangeId,proto3,customtype=cosmossdk.io/math.Int" json:"exchange_id"`
	WithdrawAddress string                `protobuf:"bytes,3,opt,name=withdraw_address,json=withdrawAddress,proto3" json:"withdraw_address,omitempty"`
}

func (m *MsgWithdrawFees) Reset()         { *m = MsgWithdrawFees{} }
func (m *MsgWithdrawFees) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawFees) ProtoMessage()    {}
func (*MsgWithdrawFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_475155718c1b701a, []int{10}
}
func (m *MsgWithdrawFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawFees.Merge(m, src)
}
func (m *MsgWithdrawFees) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawFees) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawFees.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawFees proto.InternalMessageInfo

// Response type for the Msg/WithdrawFees.
type MsgWithdrawFeesResponse struct {
}

func (m *MsgWithdrawFeesResponse) Reset()         { *m = MsgWithdrawFeesResponse{} }
func (m *MsgWithdrawFeesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawFeesResponse) ProtoMessage()    {}
func (*MsgWithdrawFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_475155718c1b701a, []int{11}
}
func (m *MsgWithdrawFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawFeesResponse.Merge(m, src)
}
func (m *MsgWithdrawFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawFeesResponse proto.InternalMessageInfo

// msg declaration for changing the moderator.
type MsgChangeBexModerator struct {
	ModeratorAddress    string `protobuf:"bytes,1,opt,name=moderator_address,json=moderatorAddress,proto3" json:"moderator_address,omitempty"`
	NewModeratorAddress string `protobuf:"bytes,2,opt,name=new_moderator_address,json=newModeratorAddress,proto3" json:"new_moderator_address,omitempty"`
}

func (m *MsgChangeBexModerator) Reset()         { *m = MsgChangeBexModerator{} }
func (m *MsgChangeBexModerator) String() string { return proto.CompactTextString(m) }
func (*MsgChangeBexModerator) ProtoMessage()    {}
func (*MsgChangeBexModerator) Descriptor() ([]byte, []int) {
	return fileDescriptor_475155718c1b701a, []int{12}
}
func (m *MsgChangeBexModerator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeBexModerator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeBexModerator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeBexModerator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeBexModerator.Merge(m, src)
}
func (m *MsgChangeBexModerator) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeBexModerator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeBexModerator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeBexModerator proto.InternalMessageInfo

// Response type for the Msg/ChangeModerator.
type MsgChangeBexModeratorResponse struct {
}

func (m *MsgChangeBexModeratorResponse) Reset()         { *m = MsgChangeBexModeratorResponse{} }
func (m *MsgChangeBexModeratorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeBexModeratorResponse) ProtoMessage()    {}
func (*MsgChangeBexModeratorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_475155718c1b701a, []int{13}
}
func (m *MsgChangeBexModeratorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeBexModeratorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeBexModeratorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeBexModeratorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeBexModeratorResponse.Merge(m, src)
}
func (m *MsgChangeBexModeratorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeBexModeratorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeBexModeratorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeBexModeratorResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterAdmin)(nil), "guru.bex.v1.MsgRegisterAdmin")
	proto.RegisterType((*MsgRegisterAdminResponse)(nil), "guru.bex.v1.MsgRegisterAdminResponse")
	proto.RegisterType((*MsgRemoveAdmin)(nil), "guru.bex.v1.MsgRemoveAdmin")
	proto.RegisterType((*MsgRemoveAdminResponse)(nil), "guru.bex.v1.MsgRemoveAdminResponse")
	proto.RegisterType((*MsgRegisterExchange)(nil), "guru.bex.v1.MsgRegisterExchange")
	proto.RegisterType((*MsgRegisterExchangeResponse)(nil), "guru.bex.v1.MsgRegisterExchangeResponse")
	proto.RegisterType((*MsgUpdateExchange)(nil), "guru.bex.v1.MsgUpdateExchange")
	proto.RegisterType((*MsgUpdateExchangeResponse)(nil), "guru.bex.v1.MsgUpdateExchangeResponse")
	proto.RegisterType((*MsgUpdateRatemeter)(nil), "guru.bex.v1.MsgUpdateRatemeter")
	proto.RegisterType((*MsgUpdateRatemeterResponse)(nil), "guru.bex.v1.MsgUpdateRatemeterResponse")
	proto.RegisterType((*MsgWithdrawFees)(nil), "guru.bex.v1.MsgWithdrawFees")
	proto.RegisterType((*MsgWithdrawFeesResponse)(nil), "guru.bex.v1.MsgWithdrawFeesResponse")
	proto.RegisterType((*MsgChangeBexModerator)(nil), "guru.bex.v1.MsgChangeBexModerator")
	proto.RegisterType((*MsgChangeBexModeratorResponse)(nil), "guru.bex.v1.MsgChangeBexModeratorResponse")
}

func init() { proto.RegisterFile("guru/bex/v1/tx.proto", fileDescriptor_475155718c1b701a) }

var fileDescriptor_475155718c1b701a = []byte{
	// 764 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4d, 0x4f, 0x13, 0x5d,
	0x14, 0xee, 0xd0, 0x97, 0x37, 0x2f, 0xa7, 0x40, 0xcb, 0xd0, 0x42, 0x19, 0x60, 0x4a, 0xca, 0xab,
	0x92, 0x9a, 0xce, 0x84, 0xea, 0x8a, 0xc4, 0x05, 0x20, 0x1a, 0x12, 0x1a, 0xcd, 0x28, 0xd1, 0x68,
	0x62, 0x33, 0x65, 0x6e, 0x6e, 0x1b, 0x98, 0x99, 0x66, 0xee, 0xed, 0x07, 0x3b, 0xc3, 0xca, 0xa5,
	0x3f, 0xc0, 0x05, 0x89, 0x7f, 0x00, 0x13, 0x7e, 0x04, 0x0b, 0x17, 0x84, 0x95, 0x71, 0x41, 0x0c,
	0x98, 0xe0, 0xc2, 0xff, 0xa0, 0x99, 0x99, 0xce, 0xa5, 0x33, 0x83, 0x9d, 0x85, 0xc4, 0xb8, 0xeb,
	0x3d, 0xcf, 0x39, 0xcf, 0x79, 0xce, 0xc7, 0xbd, 0x1d, 0x48, 0xe3, 0xa6, 0xd5, 0x94, 0xab, 0xa8,
	0x23, 0xb7, 0x16, 0x65, 0xda, 0x91, 0x1a, 0x96, 0x49, 0x4d, 0x3e, 0x61, 0x5b, 0xa5, 0x2a, 0xea,
	0x48, 0xad, 0x45, 0x21, 0xd3, 0xeb, 0x62, 0xdb, 0x1c, 0x1f, 0x61, 0x72, 0xcb, 0x24, 0xba, 0x49,
	0x64, 0x9d, 0x60, 0x1b, 0xd0, 0x09, 0xee, 0x02, 0x53, 0x2e, 0x50, 0x71, 0x4e, 0xb2, 0x7b, 0xe8,
	0x42, 0x69, 0x6c, 0x62, 0xd3, 0xb5, 0xdb, 0xbf, 0x5c, 0x6b, 0xfe, 0x3b, 0x07, 0xa9, 0x32, 0xc1,
	0x0a, 0xc2, 0x75, 0x42, 0x91, 0xb5, 0xac, 0xe9, 0x75, 0x83, 0x5f, 0x83, 0x31, 0xdd, 0xd4, 0x90,
	0xa5, 0x52, 0xd3, 0xaa, 0xa8, 0x9a, 0x66, 0x21, 0x42, 0xb2, 0xdc, 0x1c, 0xb7, 0x30, 0xb4, 0x92,
	0x3d, 0x39, 0x2c, 0xa6, 0xbb, 0xbc, 0xcb, 0x2e, 0xf2, 0x84, 0x5a, 0x75, 0x03, 0x2b, 0x29, 0x16,
	0xd2, 0xb5, 0xf3, 0xf3, 0x30, 0xa2, 0xda, 0x7c, 0x8c, 0x62, 0xc0, 0xa6, 0x50, 0x86, 0x1d, 0xa3,
	0xe7, 0xb4, 0x01, 0x09, 0xd4, 0xd9, 0xaa, 0xa9, 0x06, 0x46, 0x95, 0xba, 0x96, 0x8d, 0x3b, 0x59,
	0x6e, 0x1f, 0x9d, 0xe6, 0x62, 0x9f, 0x4f, 0x73, 0x19, 0x37, 0x13, 0xd1, 0xb6, 0xa5, 0xba, 0x29,
	0xeb, 0x2a, 0xad, 0x49, 0xeb, 0x06, 0x3d, 0x39, 0x2c, 0x42, 0x57, 0xc2, 0xba, 0x41, 0x15, 0xf0,
	0xe2, 0xd7, 0xb5, 0x25, 0xf1, 0xcd, 0x7e, 0x2e, 0xf6, 0x6d, 0x3f, 0x17, 0xdb, 0xbb, 0x38, 0x28,
	0x84, 0x8b, 0xc8, 0x0b, 0x90, 0x0d, 0x56, 0xab, 0x20, 0xd2, 0x30, 0x0d, 0x82, 0xf2, 0xef, 0x38,
	0x18, 0x75, 0x40, 0xdd, 0x6c, 0xa1, 0x3f, 0xde, 0x88, 0x48, 0xe9, 0x59, 0x98, 0xf0, 0xab, 0x63,
	0xc2, 0xdf, 0x73, 0x30, 0xde, 0x53, 0xd5, 0x5a, 0xb7, 0x1d, 0xfc, 0xbd, 0x60, 0xda, 0x28, 0xe5,
	0xfe, 0xc9, 0x2c, 0xc2, 0x7f, 0x5e, 0x67, 0x9d, 0xb1, 0x24, 0x4a, 0x19, 0xa9, 0x67, 0x37, 0x25,
	0x2f, 0x8f, 0xc2, 0xdc, 0x96, 0x84, 0xde, 0x1a, 0xfc, 0xc9, 0xf3, 0xb3, 0x30, 0x7d, 0x85, 0x48,
	0x56, 0xc4, 0x57, 0x0e, 0xc6, 0xca, 0x04, 0x6f, 0x36, 0x34, 0x95, 0xa2, 0xeb, 0x2a, 0x21, 0xb0,
	0x5c, 0x03, 0xbf, 0xb5, 0x5c, 0x7c, 0x0a, 0xe2, 0xdb, 0x68, 0xd7, 0x5d, 0x51, 0xc5, 0xfe, 0xc9,
	0xa7, 0x61, 0xb0, 0xa5, 0xee, 0x34, 0x51, 0xf6, 0x1f, 0xc7, 0xe6, 0x1e, 0xfa, 0x76, 0x61, 0x1a,
	0xa6, 0x42, 0x55, 0xb2, 0x1e, 0x7c, 0xe0, 0x80, 0x67, 0xa8, 0xa2, 0x52, 0xa4, 0x23, 0x8a, 0xac,
	0xeb, 0xda, 0xc2, 0xbb, 0x30, 0x64, 0x79, 0x9c, 0x4e, 0x2b, 0x12, 0xa5, 0x09, 0xdf, 0x40, 0x59,
	0x46, 0xe5, 0xd2, 0x31, 0x72, 0x2d, 0x67, 0x40, 0x08, 0x4b, 0x66, 0x15, 0xfd, 0xe0, 0x20, 0x59,
	0x26, 0xf8, 0x59, 0x9d, 0xd6, 0x34, 0x4b, 0x6d, 0x3f, 0x40, 0x88, 0xfc, 0x5d, 0x33, 0x5d, 0x85,
	0x54, 0xbb, 0x2b, 0x8e, 0xe9, 0x89, 0x47, 0xe8, 0x49, 0x7a, 0x11, 0xde, 0xd5, 0xed, 0x37, 0xf0,
	0x29, 0x98, 0x0c, 0x34, 0x80, 0x35, 0xe7, 0x23, 0x07, 0x99, 0x32, 0xc1, 0xab, 0x8e, 0x96, 0x15,
	0xd4, 0x29, 0x7b, 0xcd, 0xbd, 0xae, 0x89, 0x6f, 0x40, 0xc6, 0x40, 0xed, 0x4a, 0x98, 0x6a, 0x20,
	0x82, 0x6a, 0xdc, 0x40, 0xed, 0x72, 0x80, 0x2d, 0x72, 0x13, 0x72, 0x30, 0x7b, 0x65, 0x35, 0x5e,
	0xbd, 0xa5, 0xbd, 0x41, 0x88, 0x97, 0x09, 0xe6, 0x37, 0x61, 0xc4, 0xff, 0x7f, 0x33, 0xeb, 0x5b,
	0xc3, 0xe0, 0x03, 0x2d, 0xdc, 0xe8, 0x0b, 0x7b, 0xf4, 0xfc, 0x23, 0x48, 0xf4, 0xbe, 0xdd, 0xd3,
	0xe1, 0x28, 0x06, 0x0a, 0xf3, 0x7d, 0x40, 0x46, 0xf8, 0x0a, 0x52, 0xa1, 0x37, 0x75, 0xee, 0x57,
	0x5a, 0x3c, 0x0f, 0x61, 0x21, 0xca, 0x83, 0xf1, 0x3f, 0x87, 0xd1, 0xc0, 0x73, 0x27, 0x06, 0x63,
	0xfd, 0xb8, 0x70, 0xb3, 0x3f, 0xce, 0x98, 0x5f, 0x42, 0x32, 0xf8, 0x88, 0xe4, 0xae, 0x0e, 0x65,
	0x0e, 0xc2, 0xad, 0x08, 0x07, 0x46, 0xae, 0xc0, 0xb0, 0xef, 0x3e, 0xcf, 0x04, 0x03, 0x7b, 0x51,
	0xe1, 0xff, 0x7e, 0x28, 0xe3, 0x54, 0x21, 0xe9, 0x2e, 0xce, 0xe5, 0x1d, 0xc8, 0x07, 0x03, 0xc3,
	0x9b, 0x25, 0x14, 0xa2, 0x7d, 0xbc, 0x14, 0xc2, 0xe0, 0xeb, 0x8b, 0x83, 0x02, 0xb7, 0x72, 0xff,
	0xe8, 0x4c, 0xe4, 0x8e, 0xcf, 0x44, 0xee, 0xcb, 0x99, 0xc8, 0xbd, 0x3d, 0x17, 0x63, 0xc7, 0xe7,
	0x62, 0xec, 0xd3, 0xb9, 0x18, 0x7b, 0x51, 0xc0, 0x75, 0x5a, 0x6b, 0x56, 0xa5, 0x2d, 0x53, 0x97,
	0x1f, 0x3e, 0x7e, 0xda, 0x29, 0xe2, 0x1d, 0xb3, 0xaa, 0xee, 0xc8, 0x76, 0x8a, 0x62, 0xab, 0x24,
	0x77, 0x9c, 0xef, 0x30, 0xba, 0xdb, 0x40, 0xa4, 0xfa, 0xaf, 0xf3, 0xf5, 0x74, 0xe7, 0x67, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x01, 0x7f, 0x47, 0x08, 0xc3, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterAdmin registers new admin for the module
	RegisterAdmin(ctx context.Context, in *MsgRegisterAdmin, opts ...grpc.CallOption) (*MsgRegisterAdminResponse, error)
	// RemoveAdmin revekoes the admin privileges
	RemoveAdmin(ctx context.Context, in *MsgRemoveAdmin, opts ...grpc.CallOption) (*MsgRemoveAdminResponse, error)
	// RegisterExchange registers new exchange from json file
	RegisterExchange(ctx context.Context, in *MsgRegisterExchange, opts ...grpc.CallOption) (*MsgRegisterExchangeResponse, error)
	// UpdateExchange updates the existinge xchnage from json file
	UpdateExchange(ctx context.Context, in *MsgUpdateExchange, opts ...grpc.CallOption) (*MsgUpdateExchangeResponse, error)
	// UpdateRatemeter changes the state of current ratemeter
	UpdateRatemeter(ctx context.Context, in *MsgUpdateRatemeter, opts ...grpc.CallOption) (*MsgUpdateRatemeterResponse, error)
	// WithdrawFees allows the admin to withdraw collected fees from exchange
	WithdrawFees(ctx context.Context, in *MsgWithdrawFees, opts ...grpc.CallOption) (*MsgWithdrawFeesResponse, error)
	// ChangeModerator changes the state of current moderator
	ChangeModerator(ctx context.Context, in *MsgChangeBexModerator, opts ...grpc.CallOption) (*MsgChangeBexModeratorResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterAdmin(ctx context.Context, in *MsgRegisterAdmin, opts ...grpc.CallOption) (*MsgRegisterAdminResponse, error) {
	out := new(MsgRegisterAdminResponse)
	err := c.cc.Invoke(ctx, "/guru.bex.v1.Msg/RegisterAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveAdmin(ctx context.Context, in *MsgRemoveAdmin, opts ...grpc.CallOption) (*MsgRemoveAdminResponse, error) {
	out := new(MsgRemoveAdminResponse)
	err := c.cc.Invoke(ctx, "/guru.bex.v1.Msg/RemoveAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterExchange(ctx context.Context, in *MsgRegisterExchange, opts ...grpc.CallOption) (*MsgRegisterExchangeResponse, error) {
	out := new(MsgRegisterExchangeResponse)
	err := c.cc.Invoke(ctx, "/guru.bex.v1.Msg/RegisterExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateExchange(ctx context.Context, in *MsgUpdateExchange, opts ...grpc.CallOption) (*MsgUpdateExchangeResponse, error) {
	out := new(MsgUpdateExchangeResponse)
	err := c.cc.Invoke(ctx, "/guru.bex.v1.Msg/UpdateExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRatemeter(ctx context.Context, in *MsgUpdateRatemeter, opts ...grpc.CallOption) (*MsgUpdateRatemeterResponse, error) {
	out := new(MsgUpdateRatemeterResponse)
	err := c.cc.Invoke(ctx, "/guru.bex.v1.Msg/UpdateRatemeter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawFees(ctx context.Context, in *MsgWithdrawFees, opts ...grpc.CallOption) (*MsgWithdrawFeesResponse, error) {
	out := new(MsgWithdrawFeesResponse)
	err := c.cc.Invoke(ctx, "/guru.bex.v1.Msg/WithdrawFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeModerator(ctx context.Context, in *MsgChangeBexModerator, opts ...grpc.CallOption) (*MsgChangeBexModeratorResponse, error) {
	out := new(MsgChangeBexModeratorResponse)
	err := c.cc.Invoke(ctx, "/guru.bex.v1.Msg/ChangeModerator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterAdmin registers new admin for the module
	RegisterAdmin(context.Context, *MsgRegisterAdmin) (*MsgRegisterAdminResponse, error)
	// RemoveAdmin revekoes the admin privileges
	RemoveAdmin(context.Context, *MsgRemoveAdmin) (*MsgRemoveAdminResponse, error)
	// RegisterExchange registers new exchange from json file
	RegisterExchange(context.Context, *MsgRegisterExchange) (*MsgRegisterExchangeResponse, error)
	// UpdateExchange updates the existinge xchnage from json file
	UpdateExchange(context.Context, *MsgUpdateExchange) (*MsgUpdateExchangeResponse, error)
	// UpdateRatemeter changes the state of current ratemeter
	UpdateRatemeter(context.Context, *MsgUpdateRatemeter) (*MsgUpdateRatemeterResponse, error)
	// WithdrawFees allows the admin to withdraw collected fees from exchange
	WithdrawFees(context.Context, *MsgWithdrawFees) (*MsgWithdrawFeesResponse, error)
	// ChangeModerator changes the state of current moderator
	ChangeModerator(context.Context, *MsgChangeBexModerator) (*MsgChangeBexModeratorResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterAdmin(ctx context.Context, req *MsgRegisterAdmin) (*MsgRegisterAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAdmin not implemented")
}
func (*UnimplementedMsgServer) RemoveAdmin(ctx context.Context, req *MsgRemoveAdmin) (*MsgRemoveAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAdmin not implemented")
}
func (*UnimplementedMsgServer) RegisterExchange(ctx context.Context, req *MsgRegisterExchange) (*MsgRegisterExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterExchange not implemented")
}
func (*UnimplementedMsgServer) UpdateExchange(ctx context.Context, req *MsgUpdateExchange) (*MsgUpdateExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExchange not implemented")
}
func (*UnimplementedMsgServer) UpdateRatemeter(ctx context.Context, req *MsgUpdateRatemeter) (*MsgUpdateRatemeterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRatemeter not implemented")
}
func (*UnimplementedMsgServer) WithdrawFees(ctx context.Context, req *MsgWithdrawFees) (*MsgWithdrawFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawFees not implemented")
}
func (*UnimplementedMsgServer) ChangeModerator(ctx context.Context, req *MsgChangeBexModerator) (*MsgChangeBexModeratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeModerator not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.bex.v1.Msg/RegisterAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterAdmin(ctx, req.(*MsgRegisterAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.bex.v1.Msg/RemoveAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveAdmin(ctx, req.(*MsgRemoveAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterExchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.bex.v1.Msg/RegisterExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterExchange(ctx, req.(*MsgRegisterExchange))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateExchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.bex.v1.Msg/UpdateExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateExchange(ctx, req.(*MsgUpdateExchange))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRatemeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRatemeter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRatemeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.bex.v1.Msg/UpdateRatemeter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRatemeter(ctx, req.(*MsgUpdateRatemeter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.bex.v1.Msg/WithdrawFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawFees(ctx, req.(*MsgWithdrawFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeModerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeBexModerator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeModerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guru.bex.v1.Msg/ChangeModerator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeModerator(ctx, req.(*MsgChangeBexModerator))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "guru.bex.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAdmin",
			Handler:    _Msg_RegisterAdmin_Handler,
		},
		{
			MethodName: "RemoveAdmin",
			Handler:    _Msg_RemoveAdmin_Handler,
		},
		{
			MethodName: "RegisterExchange",
			Handler:    _Msg_RegisterExchange_Handler,
		},
		{
			MethodName: "UpdateExchange",
			Handler:    _Msg_UpdateExchange_Handler,
		},
		{
			MethodName: "UpdateRatemeter",
			Handler:    _Msg_UpdateRatemeter_Handler,
		},
		{
			MethodName: "WithdrawFees",
			Handler:    _Msg_WithdrawFees_Handler,
		},
		{
			MethodName: "ChangeModerator",
			Handler:    _Msg_ChangeModerator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guru/bex/v1/tx.proto",
}

func (m *MsgRegisterAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExchangeId.Size()
		i -= size
		if _, err := m.ExchangeId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModeratorAddress) > 0 {
		i -= len(m.ModeratorAddress)
		copy(dAtA[i:], m.ModeratorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModeratorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModeratorAddress) > 0 {
		i -= len(m.ModeratorAddress)
		copy(dAtA[i:], m.ModeratorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModeratorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterExchange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterExchange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exchange != nil {
		{
			size, err := m.Exchange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterExchangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterExchangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterExchangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateExchange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateExchange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.ExchangeId.Size()
		i -= size
		if _, err := m.ExchangeId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateExchangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateExchangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateExchangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRatemeter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRatemeter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRatemeter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ratemeter != nil {
		{
			size, err := m.Ratemeter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModeratorAddress) > 0 {
		i -= len(m.ModeratorAddress)
		copy(dAtA[i:], m.ModeratorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModeratorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRatemeterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRatemeterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRatemeterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawAddress) > 0 {
		i -= len(m.WithdrawAddress)
		copy(dAtA[i:], m.WithdrawAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WithdrawAddress)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.ExchangeId.Size()
		i -= size
		if _, err := m.ExchangeId.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeBexModerator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeBexModerator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeBexModerator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewModeratorAddress) > 0 {
		i -= len(m.NewModeratorAddress)
		copy(dAtA[i:], m.NewModeratorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewModeratorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModeratorAddress) > 0 {
		i -= len(m.ModeratorAddress)
		copy(dAtA[i:], m.ModeratorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModeratorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeBexModeratorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeBexModeratorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeBexModeratorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModeratorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ExchangeId.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRegisterAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModeratorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterExchange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Exchange != nil {
		l = m.Exchange.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterExchangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateExchange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ExchangeId.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateExchangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRatemeter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModeratorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Ratemeter != nil {
		l = m.Ratemeter.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateRatemeterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ExchangeId.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.WithdrawAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeBexModerator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModeratorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewModeratorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeBexModeratorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModeratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangeId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModeratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterExchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exchange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Exchange == nil {
				m.Exchange = &Exchange{}
			}
			if err := m.Exchange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterExchangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterExchangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterExchangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateExchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangeId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateExchangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateExchangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateExchangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRatemeter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRatemeter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRatemeter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModeratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratemeter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ratemeter == nil {
				m.Ratemeter = &Ratemeter{}
			}
			if err := m.Ratemeter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRatemeterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRatemeterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRatemeterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangeId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeBexModerator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeBexModerator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeBexModerator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModeratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewModeratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewModeratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeBexModeratorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeBexModeratorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeBexModeratorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
