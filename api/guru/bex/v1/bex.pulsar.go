// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package bexv1

import (
	_ "cosmossdk.io/api/amino"
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	reflect "reflect"
	sort "sort"
	sync "sync"
)

var _ protoreflect.List = (*_Exchange_15_list)(nil)

type _Exchange_15_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Exchange_15_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Exchange_15_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Exchange_15_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Exchange_15_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Exchange_15_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Exchange_15_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Exchange_15_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Exchange_15_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.Map = (*_Exchange_18_map)(nil)

type _Exchange_18_map struct {
	m *map[string]string
}

func (x *_Exchange_18_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_Exchange_18_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfString(k))
		mapValue := protoreflect.ValueOfString(v)
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_Exchange_18_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.String()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_Exchange_18_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_Exchange_18_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfString(v)
}

func (x *_Exchange_18_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.String()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.m)[concreteKey] = concreteValue
}

func (x *_Exchange_18_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	panic("should not call Mutable on protoreflect.Map whose value is not of type protoreflect.Message")
}

func (x *_Exchange_18_map) NewValue() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Exchange_18_map) IsValid() bool {
	return x.m != nil
}

var (
	md_Exchange                   protoreflect.MessageDescriptor
	fd_Exchange_id                protoreflect.FieldDescriptor
	fd_Exchange_admin_address     protoreflect.FieldDescriptor
	fd_Exchange_reserve_address   protoreflect.FieldDescriptor
	fd_Exchange_denom_a           protoreflect.FieldDescriptor
	fd_Exchange_ibc_denom_a       protoreflect.FieldDescriptor
	fd_Exchange_port_a            protoreflect.FieldDescriptor
	fd_Exchange_channel_a         protoreflect.FieldDescriptor
	fd_Exchange_denom_b           protoreflect.FieldDescriptor
	fd_Exchange_ibc_denom_b       protoreflect.FieldDescriptor
	fd_Exchange_port_b            protoreflect.FieldDescriptor
	fd_Exchange_channel_b         protoreflect.FieldDescriptor
	fd_Exchange_rate              protoreflect.FieldDescriptor
	fd_Exchange_fee               protoreflect.FieldDescriptor
	fd_Exchange_limit             protoreflect.FieldDescriptor
	fd_Exchange_accumulated_fee   protoreflect.FieldDescriptor
	fd_Exchange_oracle_request_id protoreflect.FieldDescriptor
	fd_Exchange_status            protoreflect.FieldDescriptor
	fd_Exchange_metadata          protoreflect.FieldDescriptor
)

func init() {
	file_guru_bex_v1_bex_proto_init()
	md_Exchange = File_guru_bex_v1_bex_proto.Messages().ByName("Exchange")
	fd_Exchange_id = md_Exchange.Fields().ByName("id")
	fd_Exchange_admin_address = md_Exchange.Fields().ByName("admin_address")
	fd_Exchange_reserve_address = md_Exchange.Fields().ByName("reserve_address")
	fd_Exchange_denom_a = md_Exchange.Fields().ByName("denom_a")
	fd_Exchange_ibc_denom_a = md_Exchange.Fields().ByName("ibc_denom_a")
	fd_Exchange_port_a = md_Exchange.Fields().ByName("port_a")
	fd_Exchange_channel_a = md_Exchange.Fields().ByName("channel_a")
	fd_Exchange_denom_b = md_Exchange.Fields().ByName("denom_b")
	fd_Exchange_ibc_denom_b = md_Exchange.Fields().ByName("ibc_denom_b")
	fd_Exchange_port_b = md_Exchange.Fields().ByName("port_b")
	fd_Exchange_channel_b = md_Exchange.Fields().ByName("channel_b")
	fd_Exchange_rate = md_Exchange.Fields().ByName("rate")
	fd_Exchange_fee = md_Exchange.Fields().ByName("fee")
	fd_Exchange_limit = md_Exchange.Fields().ByName("limit")
	fd_Exchange_accumulated_fee = md_Exchange.Fields().ByName("accumulated_fee")
	fd_Exchange_oracle_request_id = md_Exchange.Fields().ByName("oracle_request_id")
	fd_Exchange_status = md_Exchange.Fields().ByName("status")
	fd_Exchange_metadata = md_Exchange.Fields().ByName("metadata")
}

var _ protoreflect.Message = (*fastReflection_Exchange)(nil)

type fastReflection_Exchange Exchange

func (x *Exchange) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Exchange)(x)
}

func (x *Exchange) slowProtoReflect() protoreflect.Message {
	mi := &file_guru_bex_v1_bex_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Exchange_messageType fastReflection_Exchange_messageType
var _ protoreflect.MessageType = fastReflection_Exchange_messageType{}

type fastReflection_Exchange_messageType struct{}

func (x fastReflection_Exchange_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Exchange)(nil)
}
func (x fastReflection_Exchange_messageType) New() protoreflect.Message {
	return new(fastReflection_Exchange)
}
func (x fastReflection_Exchange_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Exchange
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Exchange) Descriptor() protoreflect.MessageDescriptor {
	return md_Exchange
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Exchange) Type() protoreflect.MessageType {
	return _fastReflection_Exchange_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Exchange) New() protoreflect.Message {
	return new(fastReflection_Exchange)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Exchange) Interface() protoreflect.ProtoMessage {
	return (*Exchange)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Exchange) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != "" {
		value := protoreflect.ValueOfString(x.Id)
		if !f(fd_Exchange_id, value) {
			return
		}
	}
	if x.AdminAddress != "" {
		value := protoreflect.ValueOfString(x.AdminAddress)
		if !f(fd_Exchange_admin_address, value) {
			return
		}
	}
	if x.ReserveAddress != "" {
		value := protoreflect.ValueOfString(x.ReserveAddress)
		if !f(fd_Exchange_reserve_address, value) {
			return
		}
	}
	if x.DenomA != "" {
		value := protoreflect.ValueOfString(x.DenomA)
		if !f(fd_Exchange_denom_a, value) {
			return
		}
	}
	if x.IbcDenomA != "" {
		value := protoreflect.ValueOfString(x.IbcDenomA)
		if !f(fd_Exchange_ibc_denom_a, value) {
			return
		}
	}
	if x.PortA != "" {
		value := protoreflect.ValueOfString(x.PortA)
		if !f(fd_Exchange_port_a, value) {
			return
		}
	}
	if x.ChannelA != "" {
		value := protoreflect.ValueOfString(x.ChannelA)
		if !f(fd_Exchange_channel_a, value) {
			return
		}
	}
	if x.DenomB != "" {
		value := protoreflect.ValueOfString(x.DenomB)
		if !f(fd_Exchange_denom_b, value) {
			return
		}
	}
	if x.IbcDenomB != "" {
		value := protoreflect.ValueOfString(x.IbcDenomB)
		if !f(fd_Exchange_ibc_denom_b, value) {
			return
		}
	}
	if x.PortB != "" {
		value := protoreflect.ValueOfString(x.PortB)
		if !f(fd_Exchange_port_b, value) {
			return
		}
	}
	if x.ChannelB != "" {
		value := protoreflect.ValueOfString(x.ChannelB)
		if !f(fd_Exchange_channel_b, value) {
			return
		}
	}
	if x.Rate != "" {
		value := protoreflect.ValueOfString(x.Rate)
		if !f(fd_Exchange_rate, value) {
			return
		}
	}
	if x.Fee != "" {
		value := protoreflect.ValueOfString(x.Fee)
		if !f(fd_Exchange_fee, value) {
			return
		}
	}
	if x.Limit != "" {
		value := protoreflect.ValueOfString(x.Limit)
		if !f(fd_Exchange_limit, value) {
			return
		}
	}
	if len(x.AccumulatedFee) != 0 {
		value := protoreflect.ValueOfList(&_Exchange_15_list{list: &x.AccumulatedFee})
		if !f(fd_Exchange_accumulated_fee, value) {
			return
		}
	}
	if x.OracleRequestId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.OracleRequestId)
		if !f(fd_Exchange_oracle_request_id, value) {
			return
		}
	}
	if x.Status != "" {
		value := protoreflect.ValueOfString(x.Status)
		if !f(fd_Exchange_status, value) {
			return
		}
	}
	if len(x.Metadata) != 0 {
		value := protoreflect.ValueOfMap(&_Exchange_18_map{m: &x.Metadata})
		if !f(fd_Exchange_metadata, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Exchange) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "guru.bex.v1.Exchange.id":
		return x.Id != ""
	case "guru.bex.v1.Exchange.admin_address":
		return x.AdminAddress != ""
	case "guru.bex.v1.Exchange.reserve_address":
		return x.ReserveAddress != ""
	case "guru.bex.v1.Exchange.denom_a":
		return x.DenomA != ""
	case "guru.bex.v1.Exchange.ibc_denom_a":
		return x.IbcDenomA != ""
	case "guru.bex.v1.Exchange.port_a":
		return x.PortA != ""
	case "guru.bex.v1.Exchange.channel_a":
		return x.ChannelA != ""
	case "guru.bex.v1.Exchange.denom_b":
		return x.DenomB != ""
	case "guru.bex.v1.Exchange.ibc_denom_b":
		return x.IbcDenomB != ""
	case "guru.bex.v1.Exchange.port_b":
		return x.PortB != ""
	case "guru.bex.v1.Exchange.channel_b":
		return x.ChannelB != ""
	case "guru.bex.v1.Exchange.rate":
		return x.Rate != ""
	case "guru.bex.v1.Exchange.fee":
		return x.Fee != ""
	case "guru.bex.v1.Exchange.limit":
		return x.Limit != ""
	case "guru.bex.v1.Exchange.accumulated_fee":
		return len(x.AccumulatedFee) != 0
	case "guru.bex.v1.Exchange.oracle_request_id":
		return x.OracleRequestId != uint64(0)
	case "guru.bex.v1.Exchange.status":
		return x.Status != ""
	case "guru.bex.v1.Exchange.metadata":
		return len(x.Metadata) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.Exchange"))
		}
		panic(fmt.Errorf("message guru.bex.v1.Exchange does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Exchange) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "guru.bex.v1.Exchange.id":
		x.Id = ""
	case "guru.bex.v1.Exchange.admin_address":
		x.AdminAddress = ""
	case "guru.bex.v1.Exchange.reserve_address":
		x.ReserveAddress = ""
	case "guru.bex.v1.Exchange.denom_a":
		x.DenomA = ""
	case "guru.bex.v1.Exchange.ibc_denom_a":
		x.IbcDenomA = ""
	case "guru.bex.v1.Exchange.port_a":
		x.PortA = ""
	case "guru.bex.v1.Exchange.channel_a":
		x.ChannelA = ""
	case "guru.bex.v1.Exchange.denom_b":
		x.DenomB = ""
	case "guru.bex.v1.Exchange.ibc_denom_b":
		x.IbcDenomB = ""
	case "guru.bex.v1.Exchange.port_b":
		x.PortB = ""
	case "guru.bex.v1.Exchange.channel_b":
		x.ChannelB = ""
	case "guru.bex.v1.Exchange.rate":
		x.Rate = ""
	case "guru.bex.v1.Exchange.fee":
		x.Fee = ""
	case "guru.bex.v1.Exchange.limit":
		x.Limit = ""
	case "guru.bex.v1.Exchange.accumulated_fee":
		x.AccumulatedFee = nil
	case "guru.bex.v1.Exchange.oracle_request_id":
		x.OracleRequestId = uint64(0)
	case "guru.bex.v1.Exchange.status":
		x.Status = ""
	case "guru.bex.v1.Exchange.metadata":
		x.Metadata = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.Exchange"))
		}
		panic(fmt.Errorf("message guru.bex.v1.Exchange does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Exchange) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "guru.bex.v1.Exchange.id":
		value := x.Id
		return protoreflect.ValueOfString(value)
	case "guru.bex.v1.Exchange.admin_address":
		value := x.AdminAddress
		return protoreflect.ValueOfString(value)
	case "guru.bex.v1.Exchange.reserve_address":
		value := x.ReserveAddress
		return protoreflect.ValueOfString(value)
	case "guru.bex.v1.Exchange.denom_a":
		value := x.DenomA
		return protoreflect.ValueOfString(value)
	case "guru.bex.v1.Exchange.ibc_denom_a":
		value := x.IbcDenomA
		return protoreflect.ValueOfString(value)
	case "guru.bex.v1.Exchange.port_a":
		value := x.PortA
		return protoreflect.ValueOfString(value)
	case "guru.bex.v1.Exchange.channel_a":
		value := x.ChannelA
		return protoreflect.ValueOfString(value)
	case "guru.bex.v1.Exchange.denom_b":
		value := x.DenomB
		return protoreflect.ValueOfString(value)
	case "guru.bex.v1.Exchange.ibc_denom_b":
		value := x.IbcDenomB
		return protoreflect.ValueOfString(value)
	case "guru.bex.v1.Exchange.port_b":
		value := x.PortB
		return protoreflect.ValueOfString(value)
	case "guru.bex.v1.Exchange.channel_b":
		value := x.ChannelB
		return protoreflect.ValueOfString(value)
	case "guru.bex.v1.Exchange.rate":
		value := x.Rate
		return protoreflect.ValueOfString(value)
	case "guru.bex.v1.Exchange.fee":
		value := x.Fee
		return protoreflect.ValueOfString(value)
	case "guru.bex.v1.Exchange.limit":
		value := x.Limit
		return protoreflect.ValueOfString(value)
	case "guru.bex.v1.Exchange.accumulated_fee":
		if len(x.AccumulatedFee) == 0 {
			return protoreflect.ValueOfList(&_Exchange_15_list{})
		}
		listValue := &_Exchange_15_list{list: &x.AccumulatedFee}
		return protoreflect.ValueOfList(listValue)
	case "guru.bex.v1.Exchange.oracle_request_id":
		value := x.OracleRequestId
		return protoreflect.ValueOfUint64(value)
	case "guru.bex.v1.Exchange.status":
		value := x.Status
		return protoreflect.ValueOfString(value)
	case "guru.bex.v1.Exchange.metadata":
		if len(x.Metadata) == 0 {
			return protoreflect.ValueOfMap(&_Exchange_18_map{})
		}
		mapValue := &_Exchange_18_map{m: &x.Metadata}
		return protoreflect.ValueOfMap(mapValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.Exchange"))
		}
		panic(fmt.Errorf("message guru.bex.v1.Exchange does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Exchange) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "guru.bex.v1.Exchange.id":
		x.Id = value.Interface().(string)
	case "guru.bex.v1.Exchange.admin_address":
		x.AdminAddress = value.Interface().(string)
	case "guru.bex.v1.Exchange.reserve_address":
		x.ReserveAddress = value.Interface().(string)
	case "guru.bex.v1.Exchange.denom_a":
		x.DenomA = value.Interface().(string)
	case "guru.bex.v1.Exchange.ibc_denom_a":
		x.IbcDenomA = value.Interface().(string)
	case "guru.bex.v1.Exchange.port_a":
		x.PortA = value.Interface().(string)
	case "guru.bex.v1.Exchange.channel_a":
		x.ChannelA = value.Interface().(string)
	case "guru.bex.v1.Exchange.denom_b":
		x.DenomB = value.Interface().(string)
	case "guru.bex.v1.Exchange.ibc_denom_b":
		x.IbcDenomB = value.Interface().(string)
	case "guru.bex.v1.Exchange.port_b":
		x.PortB = value.Interface().(string)
	case "guru.bex.v1.Exchange.channel_b":
		x.ChannelB = value.Interface().(string)
	case "guru.bex.v1.Exchange.rate":
		x.Rate = value.Interface().(string)
	case "guru.bex.v1.Exchange.fee":
		x.Fee = value.Interface().(string)
	case "guru.bex.v1.Exchange.limit":
		x.Limit = value.Interface().(string)
	case "guru.bex.v1.Exchange.accumulated_fee":
		lv := value.List()
		clv := lv.(*_Exchange_15_list)
		x.AccumulatedFee = *clv.list
	case "guru.bex.v1.Exchange.oracle_request_id":
		x.OracleRequestId = value.Uint()
	case "guru.bex.v1.Exchange.status":
		x.Status = value.Interface().(string)
	case "guru.bex.v1.Exchange.metadata":
		mv := value.Map()
		cmv := mv.(*_Exchange_18_map)
		x.Metadata = *cmv.m
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.Exchange"))
		}
		panic(fmt.Errorf("message guru.bex.v1.Exchange does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Exchange) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "guru.bex.v1.Exchange.accumulated_fee":
		if x.AccumulatedFee == nil {
			x.AccumulatedFee = []*v1beta1.Coin{}
		}
		value := &_Exchange_15_list{list: &x.AccumulatedFee}
		return protoreflect.ValueOfList(value)
	case "guru.bex.v1.Exchange.metadata":
		if x.Metadata == nil {
			x.Metadata = make(map[string]string)
		}
		value := &_Exchange_18_map{m: &x.Metadata}
		return protoreflect.ValueOfMap(value)
	case "guru.bex.v1.Exchange.id":
		panic(fmt.Errorf("field id of message guru.bex.v1.Exchange is not mutable"))
	case "guru.bex.v1.Exchange.admin_address":
		panic(fmt.Errorf("field admin_address of message guru.bex.v1.Exchange is not mutable"))
	case "guru.bex.v1.Exchange.reserve_address":
		panic(fmt.Errorf("field reserve_address of message guru.bex.v1.Exchange is not mutable"))
	case "guru.bex.v1.Exchange.denom_a":
		panic(fmt.Errorf("field denom_a of message guru.bex.v1.Exchange is not mutable"))
	case "guru.bex.v1.Exchange.ibc_denom_a":
		panic(fmt.Errorf("field ibc_denom_a of message guru.bex.v1.Exchange is not mutable"))
	case "guru.bex.v1.Exchange.port_a":
		panic(fmt.Errorf("field port_a of message guru.bex.v1.Exchange is not mutable"))
	case "guru.bex.v1.Exchange.channel_a":
		panic(fmt.Errorf("field channel_a of message guru.bex.v1.Exchange is not mutable"))
	case "guru.bex.v1.Exchange.denom_b":
		panic(fmt.Errorf("field denom_b of message guru.bex.v1.Exchange is not mutable"))
	case "guru.bex.v1.Exchange.ibc_denom_b":
		panic(fmt.Errorf("field ibc_denom_b of message guru.bex.v1.Exchange is not mutable"))
	case "guru.bex.v1.Exchange.port_b":
		panic(fmt.Errorf("field port_b of message guru.bex.v1.Exchange is not mutable"))
	case "guru.bex.v1.Exchange.channel_b":
		panic(fmt.Errorf("field channel_b of message guru.bex.v1.Exchange is not mutable"))
	case "guru.bex.v1.Exchange.rate":
		panic(fmt.Errorf("field rate of message guru.bex.v1.Exchange is not mutable"))
	case "guru.bex.v1.Exchange.fee":
		panic(fmt.Errorf("field fee of message guru.bex.v1.Exchange is not mutable"))
	case "guru.bex.v1.Exchange.limit":
		panic(fmt.Errorf("field limit of message guru.bex.v1.Exchange is not mutable"))
	case "guru.bex.v1.Exchange.oracle_request_id":
		panic(fmt.Errorf("field oracle_request_id of message guru.bex.v1.Exchange is not mutable"))
	case "guru.bex.v1.Exchange.status":
		panic(fmt.Errorf("field status of message guru.bex.v1.Exchange is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.Exchange"))
		}
		panic(fmt.Errorf("message guru.bex.v1.Exchange does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Exchange) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "guru.bex.v1.Exchange.id":
		return protoreflect.ValueOfString("")
	case "guru.bex.v1.Exchange.admin_address":
		return protoreflect.ValueOfString("")
	case "guru.bex.v1.Exchange.reserve_address":
		return protoreflect.ValueOfString("")
	case "guru.bex.v1.Exchange.denom_a":
		return protoreflect.ValueOfString("")
	case "guru.bex.v1.Exchange.ibc_denom_a":
		return protoreflect.ValueOfString("")
	case "guru.bex.v1.Exchange.port_a":
		return protoreflect.ValueOfString("")
	case "guru.bex.v1.Exchange.channel_a":
		return protoreflect.ValueOfString("")
	case "guru.bex.v1.Exchange.denom_b":
		return protoreflect.ValueOfString("")
	case "guru.bex.v1.Exchange.ibc_denom_b":
		return protoreflect.ValueOfString("")
	case "guru.bex.v1.Exchange.port_b":
		return protoreflect.ValueOfString("")
	case "guru.bex.v1.Exchange.channel_b":
		return protoreflect.ValueOfString("")
	case "guru.bex.v1.Exchange.rate":
		return protoreflect.ValueOfString("")
	case "guru.bex.v1.Exchange.fee":
		return protoreflect.ValueOfString("")
	case "guru.bex.v1.Exchange.limit":
		return protoreflect.ValueOfString("")
	case "guru.bex.v1.Exchange.accumulated_fee":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Exchange_15_list{list: &list})
	case "guru.bex.v1.Exchange.oracle_request_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "guru.bex.v1.Exchange.status":
		return protoreflect.ValueOfString("")
	case "guru.bex.v1.Exchange.metadata":
		m := make(map[string]string)
		return protoreflect.ValueOfMap(&_Exchange_18_map{m: &m})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.Exchange"))
		}
		panic(fmt.Errorf("message guru.bex.v1.Exchange does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Exchange) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in guru.bex.v1.Exchange", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Exchange) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Exchange) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Exchange) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Exchange) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Exchange)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Id)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AdminAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ReserveAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DenomA)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.IbcDenomA)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PortA)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ChannelA)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DenomB)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.IbcDenomB)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PortB)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ChannelB)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Rate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Fee)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Limit)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.AccumulatedFee) > 0 {
			for _, e := range x.AccumulatedFee {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.OracleRequestId != 0 {
			n += 2 + runtime.Sov(uint64(x.OracleRequestId))
		}
		l = len(x.Status)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if len(x.Metadata) > 0 {
			SiZeMaP := func(k string, v string) {
				mapEntrySize := 1 + len(k) + runtime.Sov(uint64(len(k))) + 1 + len(v) + runtime.Sov(uint64(len(v)))
				n += mapEntrySize + 2 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]string, 0, len(x.Metadata))
				for k := range x.Metadata {
					sortme = append(sortme, k)
				}
				sort.Strings(sortme)
				for _, k := range sortme {
					v := x.Metadata[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.Metadata {
					SiZeMaP(k, v)
				}
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Exchange)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Metadata) > 0 {
			MaRsHaLmAp := func(k string, v string) (protoiface.MarshalOutput, error) {
				baseI := i
				i -= len(v)
				copy(dAtA[i:], v)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
				i -= len(k)
				copy(dAtA[i:], k)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(k)))
				i--
				dAtA[i] = 0xa
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0x92
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForMetadata := make([]string, 0, len(x.Metadata))
				for k := range x.Metadata {
					keysForMetadata = append(keysForMetadata, string(k))
				}
				sort.Slice(keysForMetadata, func(i, j int) bool {
					return keysForMetadata[i] < keysForMetadata[j]
				})
				for iNdEx := len(keysForMetadata) - 1; iNdEx >= 0; iNdEx-- {
					v := x.Metadata[string(keysForMetadata[iNdEx])]
					out, err := MaRsHaLmAp(keysForMetadata[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.Metadata {
					v := x.Metadata[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if len(x.Status) > 0 {
			i -= len(x.Status)
			copy(dAtA[i:], x.Status)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Status)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if x.OracleRequestId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OracleRequestId))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if len(x.AccumulatedFee) > 0 {
			for iNdEx := len(x.AccumulatedFee) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AccumulatedFee[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x7a
			}
		}
		if len(x.Limit) > 0 {
			i -= len(x.Limit)
			copy(dAtA[i:], x.Limit)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Limit)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.Fee) > 0 {
			i -= len(x.Fee)
			copy(dAtA[i:], x.Fee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Fee)))
			i--
			dAtA[i] = 0x6a
		}
		if len(x.Rate) > 0 {
			i -= len(x.Rate)
			copy(dAtA[i:], x.Rate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Rate)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.ChannelB) > 0 {
			i -= len(x.ChannelB)
			copy(dAtA[i:], x.ChannelB)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ChannelB)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.PortB) > 0 {
			i -= len(x.PortB)
			copy(dAtA[i:], x.PortB)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PortB)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.IbcDenomB) > 0 {
			i -= len(x.IbcDenomB)
			copy(dAtA[i:], x.IbcDenomB)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.IbcDenomB)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.DenomB) > 0 {
			i -= len(x.DenomB)
			copy(dAtA[i:], x.DenomB)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DenomB)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.ChannelA) > 0 {
			i -= len(x.ChannelA)
			copy(dAtA[i:], x.ChannelA)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ChannelA)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.PortA) > 0 {
			i -= len(x.PortA)
			copy(dAtA[i:], x.PortA)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PortA)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.IbcDenomA) > 0 {
			i -= len(x.IbcDenomA)
			copy(dAtA[i:], x.IbcDenomA)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.IbcDenomA)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.DenomA) > 0 {
			i -= len(x.DenomA)
			copy(dAtA[i:], x.DenomA)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DenomA)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.ReserveAddress) > 0 {
			i -= len(x.ReserveAddress)
			copy(dAtA[i:], x.ReserveAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ReserveAddress)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.AdminAddress) > 0 {
			i -= len(x.AdminAddress)
			copy(dAtA[i:], x.AdminAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AdminAddress)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Id) > 0 {
			i -= len(x.Id)
			copy(dAtA[i:], x.Id)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Id)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Exchange)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Exchange: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Exchange: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Id = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AdminAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ReserveAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DenomA", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DenomA = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IbcDenomA", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.IbcDenomA = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PortA", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PortA = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChannelA", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChannelA = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DenomB", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DenomB = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IbcDenomB", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.IbcDenomB = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PortB", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PortB = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChannelB", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChannelB = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Rate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Fee = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Limit = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AccumulatedFee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AccumulatedFee = append(x.AccumulatedFee, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AccumulatedFee[len(x.AccumulatedFee)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OracleRequestId", wireType)
				}
				x.OracleRequestId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OracleRequestId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Status = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 18:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Metadata == nil {
					x.Metadata = make(map[string]string)
				}
				var mapkey string
				var mapvalue string
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						var stringLenmapkey uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapkey := int(stringLenmapkey)
						if intStringLenmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapkey := iNdEx + intStringLenmapkey
						if postStringIndexmapkey < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapkey > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
						iNdEx = postStringIndexmapkey
					} else if fieldNum == 2 {
						var stringLenmapvalue uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							stringLenmapvalue |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						intStringLenmapvalue := int(stringLenmapvalue)
						if intStringLenmapvalue < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						postStringIndexmapvalue := iNdEx + intStringLenmapvalue
						if postStringIndexmapvalue < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if postStringIndexmapvalue > l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
						iNdEx = postStringIndexmapvalue
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.Metadata[mapkey] = mapvalue
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Ratemeter                     protoreflect.MessageDescriptor
	fd_Ratemeter_request_count_limit protoreflect.FieldDescriptor
	fd_Ratemeter_request_period      protoreflect.FieldDescriptor
)

func init() {
	file_guru_bex_v1_bex_proto_init()
	md_Ratemeter = File_guru_bex_v1_bex_proto.Messages().ByName("Ratemeter")
	fd_Ratemeter_request_count_limit = md_Ratemeter.Fields().ByName("request_count_limit")
	fd_Ratemeter_request_period = md_Ratemeter.Fields().ByName("request_period")
}

var _ protoreflect.Message = (*fastReflection_Ratemeter)(nil)

type fastReflection_Ratemeter Ratemeter

func (x *Ratemeter) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Ratemeter)(x)
}

func (x *Ratemeter) slowProtoReflect() protoreflect.Message {
	mi := &file_guru_bex_v1_bex_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Ratemeter_messageType fastReflection_Ratemeter_messageType
var _ protoreflect.MessageType = fastReflection_Ratemeter_messageType{}

type fastReflection_Ratemeter_messageType struct{}

func (x fastReflection_Ratemeter_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Ratemeter)(nil)
}
func (x fastReflection_Ratemeter_messageType) New() protoreflect.Message {
	return new(fastReflection_Ratemeter)
}
func (x fastReflection_Ratemeter_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Ratemeter
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Ratemeter) Descriptor() protoreflect.MessageDescriptor {
	return md_Ratemeter
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Ratemeter) Type() protoreflect.MessageType {
	return _fastReflection_Ratemeter_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Ratemeter) New() protoreflect.Message {
	return new(fastReflection_Ratemeter)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Ratemeter) Interface() protoreflect.ProtoMessage {
	return (*Ratemeter)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Ratemeter) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RequestCountLimit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RequestCountLimit)
		if !f(fd_Ratemeter_request_count_limit, value) {
			return
		}
	}
	if x.RequestPeriod != nil {
		value := protoreflect.ValueOfMessage(x.RequestPeriod.ProtoReflect())
		if !f(fd_Ratemeter_request_period, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Ratemeter) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "guru.bex.v1.Ratemeter.request_count_limit":
		return x.RequestCountLimit != uint64(0)
	case "guru.bex.v1.Ratemeter.request_period":
		return x.RequestPeriod != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.Ratemeter"))
		}
		panic(fmt.Errorf("message guru.bex.v1.Ratemeter does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Ratemeter) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "guru.bex.v1.Ratemeter.request_count_limit":
		x.RequestCountLimit = uint64(0)
	case "guru.bex.v1.Ratemeter.request_period":
		x.RequestPeriod = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.Ratemeter"))
		}
		panic(fmt.Errorf("message guru.bex.v1.Ratemeter does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Ratemeter) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "guru.bex.v1.Ratemeter.request_count_limit":
		value := x.RequestCountLimit
		return protoreflect.ValueOfUint64(value)
	case "guru.bex.v1.Ratemeter.request_period":
		value := x.RequestPeriod
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.Ratemeter"))
		}
		panic(fmt.Errorf("message guru.bex.v1.Ratemeter does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Ratemeter) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "guru.bex.v1.Ratemeter.request_count_limit":
		x.RequestCountLimit = value.Uint()
	case "guru.bex.v1.Ratemeter.request_period":
		x.RequestPeriod = value.Message().Interface().(*durationpb.Duration)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.Ratemeter"))
		}
		panic(fmt.Errorf("message guru.bex.v1.Ratemeter does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Ratemeter) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "guru.bex.v1.Ratemeter.request_period":
		if x.RequestPeriod == nil {
			x.RequestPeriod = new(durationpb.Duration)
		}
		return protoreflect.ValueOfMessage(x.RequestPeriod.ProtoReflect())
	case "guru.bex.v1.Ratemeter.request_count_limit":
		panic(fmt.Errorf("field request_count_limit of message guru.bex.v1.Ratemeter is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.Ratemeter"))
		}
		panic(fmt.Errorf("message guru.bex.v1.Ratemeter does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Ratemeter) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "guru.bex.v1.Ratemeter.request_count_limit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "guru.bex.v1.Ratemeter.request_period":
		m := new(durationpb.Duration)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.Ratemeter"))
		}
		panic(fmt.Errorf("message guru.bex.v1.Ratemeter does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Ratemeter) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in guru.bex.v1.Ratemeter", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Ratemeter) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Ratemeter) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Ratemeter) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Ratemeter) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Ratemeter)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.RequestCountLimit != 0 {
			n += 1 + runtime.Sov(uint64(x.RequestCountLimit))
		}
		if x.RequestPeriod != nil {
			l = options.Size(x.RequestPeriod)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Ratemeter)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.RequestPeriod != nil {
			encoded, err := options.Marshal(x.RequestPeriod)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.RequestCountLimit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RequestCountLimit))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Ratemeter)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Ratemeter: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Ratemeter: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestCountLimit", wireType)
				}
				x.RequestCountLimit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RequestCountLimit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestPeriod", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.RequestPeriod == nil {
					x.RequestPeriod = &durationpb.Duration{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RequestPeriod); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_RateRegistry               protoreflect.MessageDescriptor
	fd_RateRegistry_request_count protoreflect.FieldDescriptor
	fd_RateRegistry_start_window  protoreflect.FieldDescriptor
)

func init() {
	file_guru_bex_v1_bex_proto_init()
	md_RateRegistry = File_guru_bex_v1_bex_proto.Messages().ByName("RateRegistry")
	fd_RateRegistry_request_count = md_RateRegistry.Fields().ByName("request_count")
	fd_RateRegistry_start_window = md_RateRegistry.Fields().ByName("start_window")
}

var _ protoreflect.Message = (*fastReflection_RateRegistry)(nil)

type fastReflection_RateRegistry RateRegistry

func (x *RateRegistry) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RateRegistry)(x)
}

func (x *RateRegistry) slowProtoReflect() protoreflect.Message {
	mi := &file_guru_bex_v1_bex_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RateRegistry_messageType fastReflection_RateRegistry_messageType
var _ protoreflect.MessageType = fastReflection_RateRegistry_messageType{}

type fastReflection_RateRegistry_messageType struct{}

func (x fastReflection_RateRegistry_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RateRegistry)(nil)
}
func (x fastReflection_RateRegistry_messageType) New() protoreflect.Message {
	return new(fastReflection_RateRegistry)
}
func (x fastReflection_RateRegistry_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RateRegistry
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RateRegistry) Descriptor() protoreflect.MessageDescriptor {
	return md_RateRegistry
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RateRegistry) Type() protoreflect.MessageType {
	return _fastReflection_RateRegistry_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RateRegistry) New() protoreflect.Message {
	return new(fastReflection_RateRegistry)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RateRegistry) Interface() protoreflect.ProtoMessage {
	return (*RateRegistry)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RateRegistry) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RequestCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RequestCount)
		if !f(fd_RateRegistry_request_count, value) {
			return
		}
	}
	if x.StartWindow != int64(0) {
		value := protoreflect.ValueOfInt64(x.StartWindow)
		if !f(fd_RateRegistry_start_window, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RateRegistry) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "guru.bex.v1.RateRegistry.request_count":
		return x.RequestCount != uint64(0)
	case "guru.bex.v1.RateRegistry.start_window":
		return x.StartWindow != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.RateRegistry"))
		}
		panic(fmt.Errorf("message guru.bex.v1.RateRegistry does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RateRegistry) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "guru.bex.v1.RateRegistry.request_count":
		x.RequestCount = uint64(0)
	case "guru.bex.v1.RateRegistry.start_window":
		x.StartWindow = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.RateRegistry"))
		}
		panic(fmt.Errorf("message guru.bex.v1.RateRegistry does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RateRegistry) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "guru.bex.v1.RateRegistry.request_count":
		value := x.RequestCount
		return protoreflect.ValueOfUint64(value)
	case "guru.bex.v1.RateRegistry.start_window":
		value := x.StartWindow
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.RateRegistry"))
		}
		panic(fmt.Errorf("message guru.bex.v1.RateRegistry does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RateRegistry) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "guru.bex.v1.RateRegistry.request_count":
		x.RequestCount = value.Uint()
	case "guru.bex.v1.RateRegistry.start_window":
		x.StartWindow = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.RateRegistry"))
		}
		panic(fmt.Errorf("message guru.bex.v1.RateRegistry does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RateRegistry) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "guru.bex.v1.RateRegistry.request_count":
		panic(fmt.Errorf("field request_count of message guru.bex.v1.RateRegistry is not mutable"))
	case "guru.bex.v1.RateRegistry.start_window":
		panic(fmt.Errorf("field start_window of message guru.bex.v1.RateRegistry is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.RateRegistry"))
		}
		panic(fmt.Errorf("message guru.bex.v1.RateRegistry does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RateRegistry) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "guru.bex.v1.RateRegistry.request_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "guru.bex.v1.RateRegistry.start_window":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.bex.v1.RateRegistry"))
		}
		panic(fmt.Errorf("message guru.bex.v1.RateRegistry does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RateRegistry) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in guru.bex.v1.RateRegistry", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RateRegistry) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RateRegistry) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RateRegistry) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RateRegistry) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RateRegistry)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.RequestCount != 0 {
			n += 1 + runtime.Sov(uint64(x.RequestCount))
		}
		if x.StartWindow != 0 {
			n += 1 + runtime.Sov(uint64(x.StartWindow))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RateRegistry)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.StartWindow != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StartWindow))
			i--
			dAtA[i] = 0x10
		}
		if x.RequestCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RequestCount))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RateRegistry)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RateRegistry: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RateRegistry: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestCount", wireType)
				}
				x.RequestCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RequestCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartWindow", wireType)
				}
				x.StartWindow = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StartWindow |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: guru/bex/v1/bex.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Exchange represents an exchange pair configuration between two assets.
type Exchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for this exchange pair
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Admin for the exchange
	AdminAddress string `protobuf:"bytes,2,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// Address where reserves are stored
	ReserveAddress string `protobuf:"bytes,3,opt,name=reserve_address,json=reserveAddress,proto3" json:"reserve_address,omitempty"`
	// First coin denomination
	DenomA    string `protobuf:"bytes,4,opt,name=denom_a,json=denomA,proto3" json:"denom_a,omitempty"`
	IbcDenomA string `protobuf:"bytes,5,opt,name=ibc_denom_a,json=ibcDenomA,proto3" json:"ibc_denom_a,omitempty"`
	PortA     string `protobuf:"bytes,6,opt,name=port_a,json=portA,proto3" json:"port_a,omitempty"`
	ChannelA  string `protobuf:"bytes,7,opt,name=channel_a,json=channelA,proto3" json:"channel_a,omitempty"`
	// Second coin denomination
	DenomB    string `protobuf:"bytes,8,opt,name=denom_b,json=denomB,proto3" json:"denom_b,omitempty"`
	IbcDenomB string `protobuf:"bytes,9,opt,name=ibc_denom_b,json=ibcDenomB,proto3" json:"ibc_denom_b,omitempty"`
	PortB     string `protobuf:"bytes,10,opt,name=port_b,json=portB,proto3" json:"port_b,omitempty"`
	ChannelB  string `protobuf:"bytes,11,opt,name=channel_b,json=channelB,proto3" json:"channel_b,omitempty"`
	// Exchange rate: 1 (in first coin) * rate = result (in second coin)
	Rate string `protobuf:"bytes,12,opt,name=rate,proto3" json:"rate,omitempty"`
	// Fee applied to the exchange in percentage
	// If the value of fee = 0.5 => calculatedFee = exchangeAmount * 0.005
	Fee string `protobuf:"bytes,13,opt,name=fee,proto3" json:"fee,omitempty"`
	// Maximum allowed amount for exchange operations for the first coin
	// second coin limit = limit * rate
	Limit string `protobuf:"bytes,14,opt,name=limit,proto3" json:"limit,omitempty"`
	// Total accumulated fee for this exchange
	// Admin can withdraw the accumulated fee to the given address
	AccumulatedFee []*v1beta1.Coin `protobuf:"bytes,15,rep,name=accumulated_fee,json=accumulatedFee,proto3" json:"accumulated_fee,omitempty"`
	// oracle request id used by hook to update rate
	OracleRequestId uint64 `protobuf:"varint,16,opt,name=oracle_request_id,json=oracleRequestId,proto3" json:"oracle_request_id,omitempty"`
	// Current status of the exchange
	Status string `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	// Additional metadata for future extensibility (optional)
	Metadata map[string]string `protobuf:"bytes,18,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Exchange) Reset() {
	*x = Exchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guru_bex_v1_bex_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exchange) ProtoMessage() {}

// Deprecated: Use Exchange.ProtoReflect.Descriptor instead.
func (*Exchange) Descriptor() ([]byte, []int) {
	return file_guru_bex_v1_bex_proto_rawDescGZIP(), []int{0}
}

func (x *Exchange) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Exchange) GetAdminAddress() string {
	if x != nil {
		return x.AdminAddress
	}
	return ""
}

func (x *Exchange) GetReserveAddress() string {
	if x != nil {
		return x.ReserveAddress
	}
	return ""
}

func (x *Exchange) GetDenomA() string {
	if x != nil {
		return x.DenomA
	}
	return ""
}

func (x *Exchange) GetIbcDenomA() string {
	if x != nil {
		return x.IbcDenomA
	}
	return ""
}

func (x *Exchange) GetPortA() string {
	if x != nil {
		return x.PortA
	}
	return ""
}

func (x *Exchange) GetChannelA() string {
	if x != nil {
		return x.ChannelA
	}
	return ""
}

func (x *Exchange) GetDenomB() string {
	if x != nil {
		return x.DenomB
	}
	return ""
}

func (x *Exchange) GetIbcDenomB() string {
	if x != nil {
		return x.IbcDenomB
	}
	return ""
}

func (x *Exchange) GetPortB() string {
	if x != nil {
		return x.PortB
	}
	return ""
}

func (x *Exchange) GetChannelB() string {
	if x != nil {
		return x.ChannelB
	}
	return ""
}

func (x *Exchange) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *Exchange) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *Exchange) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *Exchange) GetAccumulatedFee() []*v1beta1.Coin {
	if x != nil {
		return x.AccumulatedFee
	}
	return nil
}

func (x *Exchange) GetOracleRequestId() uint64 {
	if x != nil {
		return x.OracleRequestId
	}
	return 0
}

func (x *Exchange) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Exchange) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Ratemeter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request for each address
	RequestCountLimit uint64 `protobuf:"varint,1,opt,name=request_count_limit,json=requestCountLimit,proto3" json:"request_count_limit,omitempty"`
	// Time window for enforcing the limit (e.g. 1h, 24h).
	RequestPeriod *durationpb.Duration `protobuf:"bytes,2,opt,name=request_period,json=requestPeriod,proto3" json:"request_period,omitempty"`
}

func (x *Ratemeter) Reset() {
	*x = Ratemeter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guru_bex_v1_bex_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ratemeter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ratemeter) ProtoMessage() {}

// Deprecated: Use Ratemeter.ProtoReflect.Descriptor instead.
func (*Ratemeter) Descriptor() ([]byte, []int) {
	return file_guru_bex_v1_bex_proto_rawDescGZIP(), []int{1}
}

func (x *Ratemeter) GetRequestCountLimit() uint64 {
	if x != nil {
		return x.RequestCountLimit
	}
	return 0
}

func (x *Ratemeter) GetRequestPeriod() *durationpb.Duration {
	if x != nil {
		return x.RequestPeriod
	}
	return nil
}

type RateRegistry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// defines the number of requests from the address
	RequestCount uint64 `protobuf:"varint,1,opt,name=request_count,json=requestCount,proto3" json:"request_count,omitempty"`
	// defines the start window for counting
	StartWindow int64 `protobuf:"varint,2,opt,name=start_window,json=startWindow,proto3" json:"start_window,omitempty"`
}

func (x *RateRegistry) Reset() {
	*x = RateRegistry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guru_bex_v1_bex_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateRegistry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateRegistry) ProtoMessage() {}

// Deprecated: Use RateRegistry.ProtoReflect.Descriptor instead.
func (*RateRegistry) Descriptor() ([]byte, []int) {
	return file_guru_bex_v1_bex_proto_rawDescGZIP(), []int{2}
}

func (x *RateRegistry) GetRequestCount() uint64 {
	if x != nil {
		return x.RequestCount
	}
	return 0
}

func (x *RateRegistry) GetStartWindow() int64 {
	if x != nil {
		return x.StartWindow
	}
	return 0
}

var File_guru_bex_v1_bex_proto protoreflect.FileDescriptor

var file_guru_bex_v1_bex_proto_rawDesc = []byte{
	0x0a, 0x15, 0x67, 0x75, 0x72, 0x75, 0x2f, 0x62, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x67, 0x75, 0x72, 0x75, 0x2e, 0x62, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x07, 0x0a, 0x08, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x5f, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x41, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x62, 0x63,
	0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x5f, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x62, 0x63, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x41, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x5f, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x42, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x62, 0x63, 0x5f, 0x64, 0x65,
	0x6e, 0x6f, 0x6d, 0x5f, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x62, 0x63,
	0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x42, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x62,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x12, 0x4a, 0x0a, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01,
	0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x36, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x3e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x8a, 0x01, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x46, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x9a, 0xe7, 0xb0, 0x2a, 0x0c, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x75, 0x72, 0x75, 0x2e, 0x62, 0x65, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb0, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x73, 0x0a,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x12, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x0f,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98,
	0xdf, 0x1f, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x22, 0x56, 0x0a, 0x0c, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x8d, 0x01, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x75, 0x72, 0x75, 0x2e, 0x62, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x42, 0x08,
	0x42, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x22, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x75, 0x72,
	0x75, 0x2f, 0x62, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x65, 0x78, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x47, 0x42, 0x58, 0xaa, 0x02, 0x0b, 0x47, 0x75, 0x72, 0x75, 0x2e, 0x42, 0x65, 0x78, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x0b, 0x47, 0x75, 0x72, 0x75, 0x5c, 0x42, 0x65, 0x78, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x17, 0x47, 0x75, 0x72, 0x75, 0x5c, 0x42, 0x65, 0x78, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x47, 0x75, 0x72,
	0x75, 0x3a, 0x3a, 0x42, 0x65, 0x78, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_guru_bex_v1_bex_proto_rawDescOnce sync.Once
	file_guru_bex_v1_bex_proto_rawDescData = file_guru_bex_v1_bex_proto_rawDesc
)

func file_guru_bex_v1_bex_proto_rawDescGZIP() []byte {
	file_guru_bex_v1_bex_proto_rawDescOnce.Do(func() {
		file_guru_bex_v1_bex_proto_rawDescData = protoimpl.X.CompressGZIP(file_guru_bex_v1_bex_proto_rawDescData)
	})
	return file_guru_bex_v1_bex_proto_rawDescData
}

var file_guru_bex_v1_bex_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_guru_bex_v1_bex_proto_goTypes = []interface{}{
	(*Exchange)(nil),            // 0: guru.bex.v1.Exchange
	(*Ratemeter)(nil),           // 1: guru.bex.v1.Ratemeter
	(*RateRegistry)(nil),        // 2: guru.bex.v1.RateRegistry
	nil,                         // 3: guru.bex.v1.Exchange.MetadataEntry
	(*v1beta1.Coin)(nil),        // 4: cosmos.base.v1beta1.Coin
	(*durationpb.Duration)(nil), // 5: google.protobuf.Duration
}
var file_guru_bex_v1_bex_proto_depIdxs = []int32{
	4, // 0: guru.bex.v1.Exchange.accumulated_fee:type_name -> cosmos.base.v1beta1.Coin
	3, // 1: guru.bex.v1.Exchange.metadata:type_name -> guru.bex.v1.Exchange.MetadataEntry
	5, // 2: guru.bex.v1.Ratemeter.request_period:type_name -> google.protobuf.Duration
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_guru_bex_v1_bex_proto_init() }
func file_guru_bex_v1_bex_proto_init() {
	if File_guru_bex_v1_bex_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_guru_bex_v1_bex_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guru_bex_v1_bex_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ratemeter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guru_bex_v1_bex_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateRegistry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_guru_bex_v1_bex_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_guru_bex_v1_bex_proto_goTypes,
		DependencyIndexes: file_guru_bex_v1_bex_proto_depIdxs,
		MessageInfos:      file_guru_bex_v1_bex_proto_msgTypes,
	}.Build()
	File_guru_bex_v1_bex_proto = out.File
	file_guru_bex_v1_bex_proto_rawDesc = nil
	file_guru_bex_v1_bex_proto_goTypes = nil
	file_guru_bex_v1_bex_proto_depIdxs = nil
}
