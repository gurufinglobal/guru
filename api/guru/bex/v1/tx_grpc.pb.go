// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: guru/bex/v1/tx.proto

package bexv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_RegisterAdmin_FullMethodName    = "/guru.bex.v1.Msg/RegisterAdmin"
	Msg_RemoveAdmin_FullMethodName      = "/guru.bex.v1.Msg/RemoveAdmin"
	Msg_RegisterExchange_FullMethodName = "/guru.bex.v1.Msg/RegisterExchange"
	Msg_UpdateExchange_FullMethodName   = "/guru.bex.v1.Msg/UpdateExchange"
	Msg_UpdateRatemeter_FullMethodName  = "/guru.bex.v1.Msg/UpdateRatemeter"
	Msg_WithdrawFees_FullMethodName     = "/guru.bex.v1.Msg/WithdrawFees"
	Msg_ChangeModerator_FullMethodName  = "/guru.bex.v1.Msg/ChangeModerator"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterAdmin registers new admin for the module
	RegisterAdmin(ctx context.Context, in *MsgRegisterAdmin, opts ...grpc.CallOption) (*MsgRegisterAdminResponse, error)
	// RemoveAdmin revekoes the admin privileges
	RemoveAdmin(ctx context.Context, in *MsgRemoveAdmin, opts ...grpc.CallOption) (*MsgRemoveAdminResponse, error)
	// RegisterExchange registers new exchange from json file
	RegisterExchange(ctx context.Context, in *MsgRegisterExchange, opts ...grpc.CallOption) (*MsgRegisterExchangeResponse, error)
	// UpdateExchange updates the existinge xchnage from json file
	UpdateExchange(ctx context.Context, in *MsgUpdateExchange, opts ...grpc.CallOption) (*MsgUpdateExchangeResponse, error)
	// UpdateRatemeter changes the state of current ratemeter
	UpdateRatemeter(ctx context.Context, in *MsgUpdateRatemeter, opts ...grpc.CallOption) (*MsgUpdateRatemeterResponse, error)
	// WithdrawFees allows the admin to withdraw collected fees from exchange
	WithdrawFees(ctx context.Context, in *MsgWithdrawFees, opts ...grpc.CallOption) (*MsgWithdrawFeesResponse, error)
	// ChangeModerator changes the state of current moderator
	ChangeModerator(ctx context.Context, in *MsgChangeBexModerator, opts ...grpc.CallOption) (*MsgChangeBexModeratorResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterAdmin(ctx context.Context, in *MsgRegisterAdmin, opts ...grpc.CallOption) (*MsgRegisterAdminResponse, error) {
	out := new(MsgRegisterAdminResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveAdmin(ctx context.Context, in *MsgRemoveAdmin, opts ...grpc.CallOption) (*MsgRemoveAdminResponse, error) {
	out := new(MsgRemoveAdminResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterExchange(ctx context.Context, in *MsgRegisterExchange, opts ...grpc.CallOption) (*MsgRegisterExchangeResponse, error) {
	out := new(MsgRegisterExchangeResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterExchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateExchange(ctx context.Context, in *MsgUpdateExchange, opts ...grpc.CallOption) (*MsgUpdateExchangeResponse, error) {
	out := new(MsgUpdateExchangeResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateExchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRatemeter(ctx context.Context, in *MsgUpdateRatemeter, opts ...grpc.CallOption) (*MsgUpdateRatemeterResponse, error) {
	out := new(MsgUpdateRatemeterResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateRatemeter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawFees(ctx context.Context, in *MsgWithdrawFees, opts ...grpc.CallOption) (*MsgWithdrawFeesResponse, error) {
	out := new(MsgWithdrawFeesResponse)
	err := c.cc.Invoke(ctx, Msg_WithdrawFees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeModerator(ctx context.Context, in *MsgChangeBexModerator, opts ...grpc.CallOption) (*MsgChangeBexModeratorResponse, error) {
	out := new(MsgChangeBexModeratorResponse)
	err := c.cc.Invoke(ctx, Msg_ChangeModerator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// RegisterAdmin registers new admin for the module
	RegisterAdmin(context.Context, *MsgRegisterAdmin) (*MsgRegisterAdminResponse, error)
	// RemoveAdmin revekoes the admin privileges
	RemoveAdmin(context.Context, *MsgRemoveAdmin) (*MsgRemoveAdminResponse, error)
	// RegisterExchange registers new exchange from json file
	RegisterExchange(context.Context, *MsgRegisterExchange) (*MsgRegisterExchangeResponse, error)
	// UpdateExchange updates the existinge xchnage from json file
	UpdateExchange(context.Context, *MsgUpdateExchange) (*MsgUpdateExchangeResponse, error)
	// UpdateRatemeter changes the state of current ratemeter
	UpdateRatemeter(context.Context, *MsgUpdateRatemeter) (*MsgUpdateRatemeterResponse, error)
	// WithdrawFees allows the admin to withdraw collected fees from exchange
	WithdrawFees(context.Context, *MsgWithdrawFees) (*MsgWithdrawFeesResponse, error)
	// ChangeModerator changes the state of current moderator
	ChangeModerator(context.Context, *MsgChangeBexModerator) (*MsgChangeBexModeratorResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) RegisterAdmin(context.Context, *MsgRegisterAdmin) (*MsgRegisterAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAdmin not implemented")
}
func (UnimplementedMsgServer) RemoveAdmin(context.Context, *MsgRemoveAdmin) (*MsgRemoveAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAdmin not implemented")
}
func (UnimplementedMsgServer) RegisterExchange(context.Context, *MsgRegisterExchange) (*MsgRegisterExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterExchange not implemented")
}
func (UnimplementedMsgServer) UpdateExchange(context.Context, *MsgUpdateExchange) (*MsgUpdateExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExchange not implemented")
}
func (UnimplementedMsgServer) UpdateRatemeter(context.Context, *MsgUpdateRatemeter) (*MsgUpdateRatemeterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRatemeter not implemented")
}
func (UnimplementedMsgServer) WithdrawFees(context.Context, *MsgWithdrawFees) (*MsgWithdrawFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawFees not implemented")
}
func (UnimplementedMsgServer) ChangeModerator(context.Context, *MsgChangeBexModerator) (*MsgChangeBexModeratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeModerator not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_RegisterAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterAdmin(ctx, req.(*MsgRegisterAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveAdmin(ctx, req.(*MsgRemoveAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterExchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterExchange(ctx, req.(*MsgRegisterExchange))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateExchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateExchange(ctx, req.(*MsgUpdateExchange))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRatemeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRatemeter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRatemeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateRatemeter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRatemeter(ctx, req.(*MsgUpdateRatemeter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_WithdrawFees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawFees(ctx, req.(*MsgWithdrawFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeModerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeBexModerator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeModerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChangeModerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeModerator(ctx, req.(*MsgChangeBexModerator))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "guru.bex.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAdmin",
			Handler:    _Msg_RegisterAdmin_Handler,
		},
		{
			MethodName: "RemoveAdmin",
			Handler:    _Msg_RemoveAdmin_Handler,
		},
		{
			MethodName: "RegisterExchange",
			Handler:    _Msg_RegisterExchange_Handler,
		},
		{
			MethodName: "UpdateExchange",
			Handler:    _Msg_UpdateExchange_Handler,
		},
		{
			MethodName: "UpdateRatemeter",
			Handler:    _Msg_UpdateRatemeter_Handler,
		},
		{
			MethodName: "WithdrawFees",
			Handler:    _Msg_WithdrawFees_Handler,
		},
		{
			MethodName: "ChangeModerator",
			Handler:    _Msg_ChangeModerator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guru/bex/v1/tx.proto",
}
