// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: guru/bex/v1/query.proto

package bexv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_ModeratorAddress_FullMethodName = "/guru.bex.v1.Query/ModeratorAddress"
	Query_Exchanges_FullMethodName        = "/guru.bex.v1.Query/Exchanges"
	Query_IsAdmin_FullMethodName          = "/guru.bex.v1.Query/IsAdmin"
	Query_NextExchangeId_FullMethodName   = "/guru.bex.v1.Query/NextExchangeId"
	Query_Ratemeter_FullMethodName        = "/guru.bex.v1.Query/Ratemeter"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// ModeratorAddress returns the current moderator address
	ModeratorAddress(ctx context.Context, in *QueryModeratorAddressRequest, opts ...grpc.CallOption) (*QueryModeratorAddressResponse, error)
	// Exchanges returns the list of available exchanges
	// Or one exchange by given id
	Exchanges(ctx context.Context, in *QueryExchangesRequest, opts ...grpc.CallOption) (*QueryExchangesResponse, error)
	// IsAdmin checks if the given address is admin
	IsAdmin(ctx context.Context, in *QueryIsAdminRequest, opts ...grpc.CallOption) (*QueryIsAdminResponse, error)
	// NextExchangeId returns the id for the new exchange to be created next
	NextExchangeId(ctx context.Context, in *QueryNextExchangeIdRequest, opts ...grpc.CallOption) (*QueryNextExchangeIdResponse, error)
	// Ratemeter returns the current ratemeter state
	Ratemeter(ctx context.Context, in *QueryRatemeterRequest, opts ...grpc.CallOption) (*QueryRatemeterResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ModeratorAddress(ctx context.Context, in *QueryModeratorAddressRequest, opts ...grpc.CallOption) (*QueryModeratorAddressResponse, error) {
	out := new(QueryModeratorAddressResponse)
	err := c.cc.Invoke(ctx, Query_ModeratorAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Exchanges(ctx context.Context, in *QueryExchangesRequest, opts ...grpc.CallOption) (*QueryExchangesResponse, error) {
	out := new(QueryExchangesResponse)
	err := c.cc.Invoke(ctx, Query_Exchanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsAdmin(ctx context.Context, in *QueryIsAdminRequest, opts ...grpc.CallOption) (*QueryIsAdminResponse, error) {
	out := new(QueryIsAdminResponse)
	err := c.cc.Invoke(ctx, Query_IsAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextExchangeId(ctx context.Context, in *QueryNextExchangeIdRequest, opts ...grpc.CallOption) (*QueryNextExchangeIdResponse, error) {
	out := new(QueryNextExchangeIdResponse)
	err := c.cc.Invoke(ctx, Query_NextExchangeId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ratemeter(ctx context.Context, in *QueryRatemeterRequest, opts ...grpc.CallOption) (*QueryRatemeterResponse, error) {
	out := new(QueryRatemeterResponse)
	err := c.cc.Invoke(ctx, Query_Ratemeter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// ModeratorAddress returns the current moderator address
	ModeratorAddress(context.Context, *QueryModeratorAddressRequest) (*QueryModeratorAddressResponse, error)
	// Exchanges returns the list of available exchanges
	// Or one exchange by given id
	Exchanges(context.Context, *QueryExchangesRequest) (*QueryExchangesResponse, error)
	// IsAdmin checks if the given address is admin
	IsAdmin(context.Context, *QueryIsAdminRequest) (*QueryIsAdminResponse, error)
	// NextExchangeId returns the id for the new exchange to be created next
	NextExchangeId(context.Context, *QueryNextExchangeIdRequest) (*QueryNextExchangeIdResponse, error)
	// Ratemeter returns the current ratemeter state
	Ratemeter(context.Context, *QueryRatemeterRequest) (*QueryRatemeterResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) ModeratorAddress(context.Context, *QueryModeratorAddressRequest) (*QueryModeratorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModeratorAddress not implemented")
}
func (UnimplementedQueryServer) Exchanges(context.Context, *QueryExchangesRequest) (*QueryExchangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exchanges not implemented")
}
func (UnimplementedQueryServer) IsAdmin(context.Context, *QueryIsAdminRequest) (*QueryIsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAdmin not implemented")
}
func (UnimplementedQueryServer) NextExchangeId(context.Context, *QueryNextExchangeIdRequest) (*QueryNextExchangeIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextExchangeId not implemented")
}
func (UnimplementedQueryServer) Ratemeter(context.Context, *QueryRatemeterRequest) (*QueryRatemeterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ratemeter not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_ModeratorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModeratorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModeratorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ModeratorAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModeratorAddress(ctx, req.(*QueryModeratorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Exchanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Exchanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Exchanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Exchanges(ctx, req.(*QueryExchangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IsAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsAdmin(ctx, req.(*QueryIsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextExchangeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextExchangeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextExchangeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NextExchangeId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextExchangeId(ctx, req.(*QueryNextExchangeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ratemeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRatemeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ratemeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Ratemeter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ratemeter(ctx, req.(*QueryRatemeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "guru.bex.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModeratorAddress",
			Handler:    _Query_ModeratorAddress_Handler,
		},
		{
			MethodName: "Exchanges",
			Handler:    _Query_Exchanges_Handler,
		},
		{
			MethodName: "IsAdmin",
			Handler:    _Query_IsAdmin_Handler,
		},
		{
			MethodName: "NextExchangeId",
			Handler:    _Query_NextExchangeId_Handler,
		},
		{
			MethodName: "Ratemeter",
			Handler:    _Query_Ratemeter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "guru/bex/v1/query.proto",
}
