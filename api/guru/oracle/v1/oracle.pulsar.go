// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package oraclev1

import (
	_ "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_OracleRequestDoc_6_list)(nil)

type _OracleRequestDoc_6_list struct {
	list *[]string
}

func (x *_OracleRequestDoc_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_OracleRequestDoc_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_OracleRequestDoc_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_OracleRequestDoc_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_OracleRequestDoc_6_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message OracleRequestDoc at list field AccountList as it is not of Message kind"))
}

func (x *_OracleRequestDoc_6_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_OracleRequestDoc_6_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_OracleRequestDoc_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_OracleRequestDoc_8_list)(nil)

type _OracleRequestDoc_8_list struct {
	list *[]*OracleEndpoint
}

func (x *_OracleRequestDoc_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_OracleRequestDoc_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_OracleRequestDoc_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OracleEndpoint)
	(*x.list)[i] = concreteValue
}

func (x *_OracleRequestDoc_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OracleEndpoint)
	*x.list = append(*x.list, concreteValue)
}

func (x *_OracleRequestDoc_8_list) AppendMutable() protoreflect.Value {
	v := new(OracleEndpoint)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_OracleRequestDoc_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_OracleRequestDoc_8_list) NewElement() protoreflect.Value {
	v := new(OracleEndpoint)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_OracleRequestDoc_8_list) IsValid() bool {
	return x.list != nil
}

var (
	md_OracleRequestDoc                  protoreflect.MessageDescriptor
	fd_OracleRequestDoc_request_id       protoreflect.FieldDescriptor
	fd_OracleRequestDoc_oracle_type      protoreflect.FieldDescriptor
	fd_OracleRequestDoc_name             protoreflect.FieldDescriptor
	fd_OracleRequestDoc_description      protoreflect.FieldDescriptor
	fd_OracleRequestDoc_period           protoreflect.FieldDescriptor
	fd_OracleRequestDoc_account_list     protoreflect.FieldDescriptor
	fd_OracleRequestDoc_quorum           protoreflect.FieldDescriptor
	fd_OracleRequestDoc_endpoints        protoreflect.FieldDescriptor
	fd_OracleRequestDoc_aggregation_rule protoreflect.FieldDescriptor
	fd_OracleRequestDoc_status           protoreflect.FieldDescriptor
	fd_OracleRequestDoc_nonce            protoreflect.FieldDescriptor
)

func init() {
	file_guru_oracle_v1_oracle_proto_init()
	md_OracleRequestDoc = File_guru_oracle_v1_oracle_proto.Messages().ByName("OracleRequestDoc")
	fd_OracleRequestDoc_request_id = md_OracleRequestDoc.Fields().ByName("request_id")
	fd_OracleRequestDoc_oracle_type = md_OracleRequestDoc.Fields().ByName("oracle_type")
	fd_OracleRequestDoc_name = md_OracleRequestDoc.Fields().ByName("name")
	fd_OracleRequestDoc_description = md_OracleRequestDoc.Fields().ByName("description")
	fd_OracleRequestDoc_period = md_OracleRequestDoc.Fields().ByName("period")
	fd_OracleRequestDoc_account_list = md_OracleRequestDoc.Fields().ByName("account_list")
	fd_OracleRequestDoc_quorum = md_OracleRequestDoc.Fields().ByName("quorum")
	fd_OracleRequestDoc_endpoints = md_OracleRequestDoc.Fields().ByName("endpoints")
	fd_OracleRequestDoc_aggregation_rule = md_OracleRequestDoc.Fields().ByName("aggregation_rule")
	fd_OracleRequestDoc_status = md_OracleRequestDoc.Fields().ByName("status")
	fd_OracleRequestDoc_nonce = md_OracleRequestDoc.Fields().ByName("nonce")
}

var _ protoreflect.Message = (*fastReflection_OracleRequestDoc)(nil)

type fastReflection_OracleRequestDoc OracleRequestDoc

func (x *OracleRequestDoc) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OracleRequestDoc)(x)
}

func (x *OracleRequestDoc) slowProtoReflect() protoreflect.Message {
	mi := &file_guru_oracle_v1_oracle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OracleRequestDoc_messageType fastReflection_OracleRequestDoc_messageType
var _ protoreflect.MessageType = fastReflection_OracleRequestDoc_messageType{}

type fastReflection_OracleRequestDoc_messageType struct{}

func (x fastReflection_OracleRequestDoc_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OracleRequestDoc)(nil)
}
func (x fastReflection_OracleRequestDoc_messageType) New() protoreflect.Message {
	return new(fastReflection_OracleRequestDoc)
}
func (x fastReflection_OracleRequestDoc_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OracleRequestDoc
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OracleRequestDoc) Descriptor() protoreflect.MessageDescriptor {
	return md_OracleRequestDoc
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OracleRequestDoc) Type() protoreflect.MessageType {
	return _fastReflection_OracleRequestDoc_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OracleRequestDoc) New() protoreflect.Message {
	return new(fastReflection_OracleRequestDoc)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OracleRequestDoc) Interface() protoreflect.ProtoMessage {
	return (*OracleRequestDoc)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OracleRequestDoc) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RequestId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RequestId)
		if !f(fd_OracleRequestDoc_request_id, value) {
			return
		}
	}
	if x.OracleType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.OracleType))
		if !f(fd_OracleRequestDoc_oracle_type, value) {
			return
		}
	}
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_OracleRequestDoc_name, value) {
			return
		}
	}
	if x.Description != "" {
		value := protoreflect.ValueOfString(x.Description)
		if !f(fd_OracleRequestDoc_description, value) {
			return
		}
	}
	if x.Period != uint32(0) {
		value := protoreflect.ValueOfUint32(x.Period)
		if !f(fd_OracleRequestDoc_period, value) {
			return
		}
	}
	if len(x.AccountList) != 0 {
		value := protoreflect.ValueOfList(&_OracleRequestDoc_6_list{list: &x.AccountList})
		if !f(fd_OracleRequestDoc_account_list, value) {
			return
		}
	}
	if x.Quorum != uint32(0) {
		value := protoreflect.ValueOfUint32(x.Quorum)
		if !f(fd_OracleRequestDoc_quorum, value) {
			return
		}
	}
	if len(x.Endpoints) != 0 {
		value := protoreflect.ValueOfList(&_OracleRequestDoc_8_list{list: &x.Endpoints})
		if !f(fd_OracleRequestDoc_endpoints, value) {
			return
		}
	}
	if x.AggregationRule != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.AggregationRule))
		if !f(fd_OracleRequestDoc_aggregation_rule, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_OracleRequestDoc_status, value) {
			return
		}
	}
	if x.Nonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Nonce)
		if !f(fd_OracleRequestDoc_nonce, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OracleRequestDoc) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "guru.oracle.v1.OracleRequestDoc.request_id":
		return x.RequestId != uint64(0)
	case "guru.oracle.v1.OracleRequestDoc.oracle_type":
		return x.OracleType != 0
	case "guru.oracle.v1.OracleRequestDoc.name":
		return x.Name != ""
	case "guru.oracle.v1.OracleRequestDoc.description":
		return x.Description != ""
	case "guru.oracle.v1.OracleRequestDoc.period":
		return x.Period != uint32(0)
	case "guru.oracle.v1.OracleRequestDoc.account_list":
		return len(x.AccountList) != 0
	case "guru.oracle.v1.OracleRequestDoc.quorum":
		return x.Quorum != uint32(0)
	case "guru.oracle.v1.OracleRequestDoc.endpoints":
		return len(x.Endpoints) != 0
	case "guru.oracle.v1.OracleRequestDoc.aggregation_rule":
		return x.AggregationRule != 0
	case "guru.oracle.v1.OracleRequestDoc.status":
		return x.Status != 0
	case "guru.oracle.v1.OracleRequestDoc.nonce":
		return x.Nonce != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.OracleRequestDoc"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.OracleRequestDoc does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleRequestDoc) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "guru.oracle.v1.OracleRequestDoc.request_id":
		x.RequestId = uint64(0)
	case "guru.oracle.v1.OracleRequestDoc.oracle_type":
		x.OracleType = 0
	case "guru.oracle.v1.OracleRequestDoc.name":
		x.Name = ""
	case "guru.oracle.v1.OracleRequestDoc.description":
		x.Description = ""
	case "guru.oracle.v1.OracleRequestDoc.period":
		x.Period = uint32(0)
	case "guru.oracle.v1.OracleRequestDoc.account_list":
		x.AccountList = nil
	case "guru.oracle.v1.OracleRequestDoc.quorum":
		x.Quorum = uint32(0)
	case "guru.oracle.v1.OracleRequestDoc.endpoints":
		x.Endpoints = nil
	case "guru.oracle.v1.OracleRequestDoc.aggregation_rule":
		x.AggregationRule = 0
	case "guru.oracle.v1.OracleRequestDoc.status":
		x.Status = 0
	case "guru.oracle.v1.OracleRequestDoc.nonce":
		x.Nonce = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.OracleRequestDoc"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.OracleRequestDoc does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OracleRequestDoc) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "guru.oracle.v1.OracleRequestDoc.request_id":
		value := x.RequestId
		return protoreflect.ValueOfUint64(value)
	case "guru.oracle.v1.OracleRequestDoc.oracle_type":
		value := x.OracleType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "guru.oracle.v1.OracleRequestDoc.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "guru.oracle.v1.OracleRequestDoc.description":
		value := x.Description
		return protoreflect.ValueOfString(value)
	case "guru.oracle.v1.OracleRequestDoc.period":
		value := x.Period
		return protoreflect.ValueOfUint32(value)
	case "guru.oracle.v1.OracleRequestDoc.account_list":
		if len(x.AccountList) == 0 {
			return protoreflect.ValueOfList(&_OracleRequestDoc_6_list{})
		}
		listValue := &_OracleRequestDoc_6_list{list: &x.AccountList}
		return protoreflect.ValueOfList(listValue)
	case "guru.oracle.v1.OracleRequestDoc.quorum":
		value := x.Quorum
		return protoreflect.ValueOfUint32(value)
	case "guru.oracle.v1.OracleRequestDoc.endpoints":
		if len(x.Endpoints) == 0 {
			return protoreflect.ValueOfList(&_OracleRequestDoc_8_list{})
		}
		listValue := &_OracleRequestDoc_8_list{list: &x.Endpoints}
		return protoreflect.ValueOfList(listValue)
	case "guru.oracle.v1.OracleRequestDoc.aggregation_rule":
		value := x.AggregationRule
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "guru.oracle.v1.OracleRequestDoc.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "guru.oracle.v1.OracleRequestDoc.nonce":
		value := x.Nonce
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.OracleRequestDoc"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.OracleRequestDoc does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleRequestDoc) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "guru.oracle.v1.OracleRequestDoc.request_id":
		x.RequestId = value.Uint()
	case "guru.oracle.v1.OracleRequestDoc.oracle_type":
		x.OracleType = (OracleType)(value.Enum())
	case "guru.oracle.v1.OracleRequestDoc.name":
		x.Name = value.Interface().(string)
	case "guru.oracle.v1.OracleRequestDoc.description":
		x.Description = value.Interface().(string)
	case "guru.oracle.v1.OracleRequestDoc.period":
		x.Period = uint32(value.Uint())
	case "guru.oracle.v1.OracleRequestDoc.account_list":
		lv := value.List()
		clv := lv.(*_OracleRequestDoc_6_list)
		x.AccountList = *clv.list
	case "guru.oracle.v1.OracleRequestDoc.quorum":
		x.Quorum = uint32(value.Uint())
	case "guru.oracle.v1.OracleRequestDoc.endpoints":
		lv := value.List()
		clv := lv.(*_OracleRequestDoc_8_list)
		x.Endpoints = *clv.list
	case "guru.oracle.v1.OracleRequestDoc.aggregation_rule":
		x.AggregationRule = (AggregationRule)(value.Enum())
	case "guru.oracle.v1.OracleRequestDoc.status":
		x.Status = (RequestStatus)(value.Enum())
	case "guru.oracle.v1.OracleRequestDoc.nonce":
		x.Nonce = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.OracleRequestDoc"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.OracleRequestDoc does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleRequestDoc) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "guru.oracle.v1.OracleRequestDoc.account_list":
		if x.AccountList == nil {
			x.AccountList = []string{}
		}
		value := &_OracleRequestDoc_6_list{list: &x.AccountList}
		return protoreflect.ValueOfList(value)
	case "guru.oracle.v1.OracleRequestDoc.endpoints":
		if x.Endpoints == nil {
			x.Endpoints = []*OracleEndpoint{}
		}
		value := &_OracleRequestDoc_8_list{list: &x.Endpoints}
		return protoreflect.ValueOfList(value)
	case "guru.oracle.v1.OracleRequestDoc.request_id":
		panic(fmt.Errorf("field request_id of message guru.oracle.v1.OracleRequestDoc is not mutable"))
	case "guru.oracle.v1.OracleRequestDoc.oracle_type":
		panic(fmt.Errorf("field oracle_type of message guru.oracle.v1.OracleRequestDoc is not mutable"))
	case "guru.oracle.v1.OracleRequestDoc.name":
		panic(fmt.Errorf("field name of message guru.oracle.v1.OracleRequestDoc is not mutable"))
	case "guru.oracle.v1.OracleRequestDoc.description":
		panic(fmt.Errorf("field description of message guru.oracle.v1.OracleRequestDoc is not mutable"))
	case "guru.oracle.v1.OracleRequestDoc.period":
		panic(fmt.Errorf("field period of message guru.oracle.v1.OracleRequestDoc is not mutable"))
	case "guru.oracle.v1.OracleRequestDoc.quorum":
		panic(fmt.Errorf("field quorum of message guru.oracle.v1.OracleRequestDoc is not mutable"))
	case "guru.oracle.v1.OracleRequestDoc.aggregation_rule":
		panic(fmt.Errorf("field aggregation_rule of message guru.oracle.v1.OracleRequestDoc is not mutable"))
	case "guru.oracle.v1.OracleRequestDoc.status":
		panic(fmt.Errorf("field status of message guru.oracle.v1.OracleRequestDoc is not mutable"))
	case "guru.oracle.v1.OracleRequestDoc.nonce":
		panic(fmt.Errorf("field nonce of message guru.oracle.v1.OracleRequestDoc is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.OracleRequestDoc"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.OracleRequestDoc does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OracleRequestDoc) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "guru.oracle.v1.OracleRequestDoc.request_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "guru.oracle.v1.OracleRequestDoc.oracle_type":
		return protoreflect.ValueOfEnum(0)
	case "guru.oracle.v1.OracleRequestDoc.name":
		return protoreflect.ValueOfString("")
	case "guru.oracle.v1.OracleRequestDoc.description":
		return protoreflect.ValueOfString("")
	case "guru.oracle.v1.OracleRequestDoc.period":
		return protoreflect.ValueOfUint32(uint32(0))
	case "guru.oracle.v1.OracleRequestDoc.account_list":
		list := []string{}
		return protoreflect.ValueOfList(&_OracleRequestDoc_6_list{list: &list})
	case "guru.oracle.v1.OracleRequestDoc.quorum":
		return protoreflect.ValueOfUint32(uint32(0))
	case "guru.oracle.v1.OracleRequestDoc.endpoints":
		list := []*OracleEndpoint{}
		return protoreflect.ValueOfList(&_OracleRequestDoc_8_list{list: &list})
	case "guru.oracle.v1.OracleRequestDoc.aggregation_rule":
		return protoreflect.ValueOfEnum(0)
	case "guru.oracle.v1.OracleRequestDoc.status":
		return protoreflect.ValueOfEnum(0)
	case "guru.oracle.v1.OracleRequestDoc.nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.OracleRequestDoc"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.OracleRequestDoc does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OracleRequestDoc) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in guru.oracle.v1.OracleRequestDoc", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OracleRequestDoc) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleRequestDoc) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OracleRequestDoc) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OracleRequestDoc) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OracleRequestDoc)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.RequestId != 0 {
			n += 1 + runtime.Sov(uint64(x.RequestId))
		}
		if x.OracleType != 0 {
			n += 1 + runtime.Sov(uint64(x.OracleType))
		}
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Description)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Period != 0 {
			n += 1 + runtime.Sov(uint64(x.Period))
		}
		if len(x.AccountList) > 0 {
			for _, s := range x.AccountList {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Quorum != 0 {
			n += 1 + runtime.Sov(uint64(x.Quorum))
		}
		if len(x.Endpoints) > 0 {
			for _, e := range x.Endpoints {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.AggregationRule != 0 {
			n += 1 + runtime.Sov(uint64(x.AggregationRule))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.Nonce != 0 {
			n += 1 + runtime.Sov(uint64(x.Nonce))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OracleRequestDoc)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Nonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Nonce))
			i--
			dAtA[i] = 0x60
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x50
		}
		if x.AggregationRule != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AggregationRule))
			i--
			dAtA[i] = 0x48
		}
		if len(x.Endpoints) > 0 {
			for iNdEx := len(x.Endpoints) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Endpoints[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if x.Quorum != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Quorum))
			i--
			dAtA[i] = 0x38
		}
		if len(x.AccountList) > 0 {
			for iNdEx := len(x.AccountList) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.AccountList[iNdEx])
				copy(dAtA[i:], x.AccountList[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AccountList[iNdEx])))
				i--
				dAtA[i] = 0x32
			}
		}
		if x.Period != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Period))
			i--
			dAtA[i] = 0x28
		}
		if len(x.Description) > 0 {
			i -= len(x.Description)
			copy(dAtA[i:], x.Description)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Description)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0x1a
		}
		if x.OracleType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OracleType))
			i--
			dAtA[i] = 0x10
		}
		if x.RequestId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RequestId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OracleRequestDoc)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OracleRequestDoc: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OracleRequestDoc: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
				}
				x.RequestId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RequestId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OracleType", wireType)
				}
				x.OracleType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OracleType |= OracleType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Description = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
				}
				x.Period = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Period |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AccountList", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AccountList = append(x.AccountList, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Quorum", wireType)
				}
				x.Quorum = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Quorum |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Endpoints = append(x.Endpoints, &OracleEndpoint{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Endpoints[len(x.Endpoints)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AggregationRule", wireType)
				}
				x.AggregationRule = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AggregationRule |= AggregationRule(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= RequestStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
				}
				x.Nonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Nonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_OracleEndpoint            protoreflect.MessageDescriptor
	fd_OracleEndpoint_url        protoreflect.FieldDescriptor
	fd_OracleEndpoint_parse_rule protoreflect.FieldDescriptor
)

func init() {
	file_guru_oracle_v1_oracle_proto_init()
	md_OracleEndpoint = File_guru_oracle_v1_oracle_proto.Messages().ByName("OracleEndpoint")
	fd_OracleEndpoint_url = md_OracleEndpoint.Fields().ByName("url")
	fd_OracleEndpoint_parse_rule = md_OracleEndpoint.Fields().ByName("parse_rule")
}

var _ protoreflect.Message = (*fastReflection_OracleEndpoint)(nil)

type fastReflection_OracleEndpoint OracleEndpoint

func (x *OracleEndpoint) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OracleEndpoint)(x)
}

func (x *OracleEndpoint) slowProtoReflect() protoreflect.Message {
	mi := &file_guru_oracle_v1_oracle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OracleEndpoint_messageType fastReflection_OracleEndpoint_messageType
var _ protoreflect.MessageType = fastReflection_OracleEndpoint_messageType{}

type fastReflection_OracleEndpoint_messageType struct{}

func (x fastReflection_OracleEndpoint_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OracleEndpoint)(nil)
}
func (x fastReflection_OracleEndpoint_messageType) New() protoreflect.Message {
	return new(fastReflection_OracleEndpoint)
}
func (x fastReflection_OracleEndpoint_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OracleEndpoint
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OracleEndpoint) Descriptor() protoreflect.MessageDescriptor {
	return md_OracleEndpoint
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OracleEndpoint) Type() protoreflect.MessageType {
	return _fastReflection_OracleEndpoint_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OracleEndpoint) New() protoreflect.Message {
	return new(fastReflection_OracleEndpoint)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OracleEndpoint) Interface() protoreflect.ProtoMessage {
	return (*OracleEndpoint)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OracleEndpoint) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Url != "" {
		value := protoreflect.ValueOfString(x.Url)
		if !f(fd_OracleEndpoint_url, value) {
			return
		}
	}
	if x.ParseRule != "" {
		value := protoreflect.ValueOfString(x.ParseRule)
		if !f(fd_OracleEndpoint_parse_rule, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OracleEndpoint) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "guru.oracle.v1.OracleEndpoint.url":
		return x.Url != ""
	case "guru.oracle.v1.OracleEndpoint.parse_rule":
		return x.ParseRule != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.OracleEndpoint"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.OracleEndpoint does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleEndpoint) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "guru.oracle.v1.OracleEndpoint.url":
		x.Url = ""
	case "guru.oracle.v1.OracleEndpoint.parse_rule":
		x.ParseRule = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.OracleEndpoint"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.OracleEndpoint does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OracleEndpoint) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "guru.oracle.v1.OracleEndpoint.url":
		value := x.Url
		return protoreflect.ValueOfString(value)
	case "guru.oracle.v1.OracleEndpoint.parse_rule":
		value := x.ParseRule
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.OracleEndpoint"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.OracleEndpoint does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleEndpoint) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "guru.oracle.v1.OracleEndpoint.url":
		x.Url = value.Interface().(string)
	case "guru.oracle.v1.OracleEndpoint.parse_rule":
		x.ParseRule = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.OracleEndpoint"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.OracleEndpoint does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleEndpoint) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "guru.oracle.v1.OracleEndpoint.url":
		panic(fmt.Errorf("field url of message guru.oracle.v1.OracleEndpoint is not mutable"))
	case "guru.oracle.v1.OracleEndpoint.parse_rule":
		panic(fmt.Errorf("field parse_rule of message guru.oracle.v1.OracleEndpoint is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.OracleEndpoint"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.OracleEndpoint does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OracleEndpoint) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "guru.oracle.v1.OracleEndpoint.url":
		return protoreflect.ValueOfString("")
	case "guru.oracle.v1.OracleEndpoint.parse_rule":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.OracleEndpoint"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.OracleEndpoint does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OracleEndpoint) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in guru.oracle.v1.OracleEndpoint", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OracleEndpoint) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleEndpoint) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OracleEndpoint) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OracleEndpoint) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OracleEndpoint)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Url)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ParseRule)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OracleEndpoint)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ParseRule) > 0 {
			i -= len(x.ParseRule)
			copy(dAtA[i:], x.ParseRule)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ParseRule)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Url) > 0 {
			i -= len(x.Url)
			copy(dAtA[i:], x.Url)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Url)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OracleEndpoint)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OracleEndpoint: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OracleEndpoint: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Url = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParseRule", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ParseRule = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SubmitDataSet            protoreflect.MessageDescriptor
	fd_SubmitDataSet_request_id protoreflect.FieldDescriptor
	fd_SubmitDataSet_nonce      protoreflect.FieldDescriptor
	fd_SubmitDataSet_raw_data   protoreflect.FieldDescriptor
	fd_SubmitDataSet_provider   protoreflect.FieldDescriptor
	fd_SubmitDataSet_signature  protoreflect.FieldDescriptor
)

func init() {
	file_guru_oracle_v1_oracle_proto_init()
	md_SubmitDataSet = File_guru_oracle_v1_oracle_proto.Messages().ByName("SubmitDataSet")
	fd_SubmitDataSet_request_id = md_SubmitDataSet.Fields().ByName("request_id")
	fd_SubmitDataSet_nonce = md_SubmitDataSet.Fields().ByName("nonce")
	fd_SubmitDataSet_raw_data = md_SubmitDataSet.Fields().ByName("raw_data")
	fd_SubmitDataSet_provider = md_SubmitDataSet.Fields().ByName("provider")
	fd_SubmitDataSet_signature = md_SubmitDataSet.Fields().ByName("signature")
}

var _ protoreflect.Message = (*fastReflection_SubmitDataSet)(nil)

type fastReflection_SubmitDataSet SubmitDataSet

func (x *SubmitDataSet) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SubmitDataSet)(x)
}

func (x *SubmitDataSet) slowProtoReflect() protoreflect.Message {
	mi := &file_guru_oracle_v1_oracle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SubmitDataSet_messageType fastReflection_SubmitDataSet_messageType
var _ protoreflect.MessageType = fastReflection_SubmitDataSet_messageType{}

type fastReflection_SubmitDataSet_messageType struct{}

func (x fastReflection_SubmitDataSet_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SubmitDataSet)(nil)
}
func (x fastReflection_SubmitDataSet_messageType) New() protoreflect.Message {
	return new(fastReflection_SubmitDataSet)
}
func (x fastReflection_SubmitDataSet_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SubmitDataSet
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SubmitDataSet) Descriptor() protoreflect.MessageDescriptor {
	return md_SubmitDataSet
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SubmitDataSet) Type() protoreflect.MessageType {
	return _fastReflection_SubmitDataSet_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SubmitDataSet) New() protoreflect.Message {
	return new(fastReflection_SubmitDataSet)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SubmitDataSet) Interface() protoreflect.ProtoMessage {
	return (*SubmitDataSet)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SubmitDataSet) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RequestId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RequestId)
		if !f(fd_SubmitDataSet_request_id, value) {
			return
		}
	}
	if x.Nonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Nonce)
		if !f(fd_SubmitDataSet_nonce, value) {
			return
		}
	}
	if x.RawData != "" {
		value := protoreflect.ValueOfString(x.RawData)
		if !f(fd_SubmitDataSet_raw_data, value) {
			return
		}
	}
	if x.Provider != "" {
		value := protoreflect.ValueOfString(x.Provider)
		if !f(fd_SubmitDataSet_provider, value) {
			return
		}
	}
	if len(x.Signature) != 0 {
		value := protoreflect.ValueOfBytes(x.Signature)
		if !f(fd_SubmitDataSet_signature, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SubmitDataSet) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "guru.oracle.v1.SubmitDataSet.request_id":
		return x.RequestId != uint64(0)
	case "guru.oracle.v1.SubmitDataSet.nonce":
		return x.Nonce != uint64(0)
	case "guru.oracle.v1.SubmitDataSet.raw_data":
		return x.RawData != ""
	case "guru.oracle.v1.SubmitDataSet.provider":
		return x.Provider != ""
	case "guru.oracle.v1.SubmitDataSet.signature":
		return len(x.Signature) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.SubmitDataSet"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.SubmitDataSet does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubmitDataSet) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "guru.oracle.v1.SubmitDataSet.request_id":
		x.RequestId = uint64(0)
	case "guru.oracle.v1.SubmitDataSet.nonce":
		x.Nonce = uint64(0)
	case "guru.oracle.v1.SubmitDataSet.raw_data":
		x.RawData = ""
	case "guru.oracle.v1.SubmitDataSet.provider":
		x.Provider = ""
	case "guru.oracle.v1.SubmitDataSet.signature":
		x.Signature = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.SubmitDataSet"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.SubmitDataSet does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SubmitDataSet) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "guru.oracle.v1.SubmitDataSet.request_id":
		value := x.RequestId
		return protoreflect.ValueOfUint64(value)
	case "guru.oracle.v1.SubmitDataSet.nonce":
		value := x.Nonce
		return protoreflect.ValueOfUint64(value)
	case "guru.oracle.v1.SubmitDataSet.raw_data":
		value := x.RawData
		return protoreflect.ValueOfString(value)
	case "guru.oracle.v1.SubmitDataSet.provider":
		value := x.Provider
		return protoreflect.ValueOfString(value)
	case "guru.oracle.v1.SubmitDataSet.signature":
		value := x.Signature
		return protoreflect.ValueOfBytes(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.SubmitDataSet"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.SubmitDataSet does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubmitDataSet) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "guru.oracle.v1.SubmitDataSet.request_id":
		x.RequestId = value.Uint()
	case "guru.oracle.v1.SubmitDataSet.nonce":
		x.Nonce = value.Uint()
	case "guru.oracle.v1.SubmitDataSet.raw_data":
		x.RawData = value.Interface().(string)
	case "guru.oracle.v1.SubmitDataSet.provider":
		x.Provider = value.Interface().(string)
	case "guru.oracle.v1.SubmitDataSet.signature":
		x.Signature = value.Bytes()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.SubmitDataSet"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.SubmitDataSet does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubmitDataSet) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "guru.oracle.v1.SubmitDataSet.request_id":
		panic(fmt.Errorf("field request_id of message guru.oracle.v1.SubmitDataSet is not mutable"))
	case "guru.oracle.v1.SubmitDataSet.nonce":
		panic(fmt.Errorf("field nonce of message guru.oracle.v1.SubmitDataSet is not mutable"))
	case "guru.oracle.v1.SubmitDataSet.raw_data":
		panic(fmt.Errorf("field raw_data of message guru.oracle.v1.SubmitDataSet is not mutable"))
	case "guru.oracle.v1.SubmitDataSet.provider":
		panic(fmt.Errorf("field provider of message guru.oracle.v1.SubmitDataSet is not mutable"))
	case "guru.oracle.v1.SubmitDataSet.signature":
		panic(fmt.Errorf("field signature of message guru.oracle.v1.SubmitDataSet is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.SubmitDataSet"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.SubmitDataSet does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SubmitDataSet) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "guru.oracle.v1.SubmitDataSet.request_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "guru.oracle.v1.SubmitDataSet.nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	case "guru.oracle.v1.SubmitDataSet.raw_data":
		return protoreflect.ValueOfString("")
	case "guru.oracle.v1.SubmitDataSet.provider":
		return protoreflect.ValueOfString("")
	case "guru.oracle.v1.SubmitDataSet.signature":
		return protoreflect.ValueOfBytes(nil)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.SubmitDataSet"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.SubmitDataSet does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SubmitDataSet) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in guru.oracle.v1.SubmitDataSet", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SubmitDataSet) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubmitDataSet) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SubmitDataSet) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SubmitDataSet) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SubmitDataSet)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.RequestId != 0 {
			n += 1 + runtime.Sov(uint64(x.RequestId))
		}
		if x.Nonce != 0 {
			n += 1 + runtime.Sov(uint64(x.Nonce))
		}
		l = len(x.RawData)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Provider)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Signature)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SubmitDataSet)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Signature) > 0 {
			i -= len(x.Signature)
			copy(dAtA[i:], x.Signature)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Signature)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Provider) > 0 {
			i -= len(x.Provider)
			copy(dAtA[i:], x.Provider)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Provider)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.RawData) > 0 {
			i -= len(x.RawData)
			copy(dAtA[i:], x.RawData)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RawData)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Nonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Nonce))
			i--
			dAtA[i] = 0x10
		}
		if x.RequestId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RequestId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SubmitDataSet)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SubmitDataSet: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SubmitDataSet: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
				}
				x.RequestId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RequestId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
				}
				x.Nonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Nonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RawData", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RawData = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Provider = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Signature = append(x.Signature[:0], dAtA[iNdEx:postIndex]...)
				if x.Signature == nil {
					x.Signature = []byte{}
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_DataSet              protoreflect.MessageDescriptor
	fd_DataSet_request_id   protoreflect.FieldDescriptor
	fd_DataSet_nonce        protoreflect.FieldDescriptor
	fd_DataSet_block_height protoreflect.FieldDescriptor
	fd_DataSet_block_time   protoreflect.FieldDescriptor
	fd_DataSet_raw_data     protoreflect.FieldDescriptor
)

func init() {
	file_guru_oracle_v1_oracle_proto_init()
	md_DataSet = File_guru_oracle_v1_oracle_proto.Messages().ByName("DataSet")
	fd_DataSet_request_id = md_DataSet.Fields().ByName("request_id")
	fd_DataSet_nonce = md_DataSet.Fields().ByName("nonce")
	fd_DataSet_block_height = md_DataSet.Fields().ByName("block_height")
	fd_DataSet_block_time = md_DataSet.Fields().ByName("block_time")
	fd_DataSet_raw_data = md_DataSet.Fields().ByName("raw_data")
}

var _ protoreflect.Message = (*fastReflection_DataSet)(nil)

type fastReflection_DataSet DataSet

func (x *DataSet) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DataSet)(x)
}

func (x *DataSet) slowProtoReflect() protoreflect.Message {
	mi := &file_guru_oracle_v1_oracle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DataSet_messageType fastReflection_DataSet_messageType
var _ protoreflect.MessageType = fastReflection_DataSet_messageType{}

type fastReflection_DataSet_messageType struct{}

func (x fastReflection_DataSet_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DataSet)(nil)
}
func (x fastReflection_DataSet_messageType) New() protoreflect.Message {
	return new(fastReflection_DataSet)
}
func (x fastReflection_DataSet_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DataSet
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DataSet) Descriptor() protoreflect.MessageDescriptor {
	return md_DataSet
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DataSet) Type() protoreflect.MessageType {
	return _fastReflection_DataSet_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DataSet) New() protoreflect.Message {
	return new(fastReflection_DataSet)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DataSet) Interface() protoreflect.ProtoMessage {
	return (*DataSet)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DataSet) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RequestId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RequestId)
		if !f(fd_DataSet_request_id, value) {
			return
		}
	}
	if x.Nonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Nonce)
		if !f(fd_DataSet_nonce, value) {
			return
		}
	}
	if x.BlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockHeight)
		if !f(fd_DataSet_block_height, value) {
			return
		}
	}
	if x.BlockTime != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockTime)
		if !f(fd_DataSet_block_time, value) {
			return
		}
	}
	if x.RawData != "" {
		value := protoreflect.ValueOfString(x.RawData)
		if !f(fd_DataSet_raw_data, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DataSet) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "guru.oracle.v1.DataSet.request_id":
		return x.RequestId != uint64(0)
	case "guru.oracle.v1.DataSet.nonce":
		return x.Nonce != uint64(0)
	case "guru.oracle.v1.DataSet.block_height":
		return x.BlockHeight != uint64(0)
	case "guru.oracle.v1.DataSet.block_time":
		return x.BlockTime != uint64(0)
	case "guru.oracle.v1.DataSet.raw_data":
		return x.RawData != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.DataSet"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.DataSet does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DataSet) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "guru.oracle.v1.DataSet.request_id":
		x.RequestId = uint64(0)
	case "guru.oracle.v1.DataSet.nonce":
		x.Nonce = uint64(0)
	case "guru.oracle.v1.DataSet.block_height":
		x.BlockHeight = uint64(0)
	case "guru.oracle.v1.DataSet.block_time":
		x.BlockTime = uint64(0)
	case "guru.oracle.v1.DataSet.raw_data":
		x.RawData = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.DataSet"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.DataSet does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DataSet) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "guru.oracle.v1.DataSet.request_id":
		value := x.RequestId
		return protoreflect.ValueOfUint64(value)
	case "guru.oracle.v1.DataSet.nonce":
		value := x.Nonce
		return protoreflect.ValueOfUint64(value)
	case "guru.oracle.v1.DataSet.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfUint64(value)
	case "guru.oracle.v1.DataSet.block_time":
		value := x.BlockTime
		return protoreflect.ValueOfUint64(value)
	case "guru.oracle.v1.DataSet.raw_data":
		value := x.RawData
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.DataSet"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.DataSet does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DataSet) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "guru.oracle.v1.DataSet.request_id":
		x.RequestId = value.Uint()
	case "guru.oracle.v1.DataSet.nonce":
		x.Nonce = value.Uint()
	case "guru.oracle.v1.DataSet.block_height":
		x.BlockHeight = value.Uint()
	case "guru.oracle.v1.DataSet.block_time":
		x.BlockTime = value.Uint()
	case "guru.oracle.v1.DataSet.raw_data":
		x.RawData = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.DataSet"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.DataSet does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DataSet) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "guru.oracle.v1.DataSet.request_id":
		panic(fmt.Errorf("field request_id of message guru.oracle.v1.DataSet is not mutable"))
	case "guru.oracle.v1.DataSet.nonce":
		panic(fmt.Errorf("field nonce of message guru.oracle.v1.DataSet is not mutable"))
	case "guru.oracle.v1.DataSet.block_height":
		panic(fmt.Errorf("field block_height of message guru.oracle.v1.DataSet is not mutable"))
	case "guru.oracle.v1.DataSet.block_time":
		panic(fmt.Errorf("field block_time of message guru.oracle.v1.DataSet is not mutable"))
	case "guru.oracle.v1.DataSet.raw_data":
		panic(fmt.Errorf("field raw_data of message guru.oracle.v1.DataSet is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.DataSet"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.DataSet does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DataSet) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "guru.oracle.v1.DataSet.request_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "guru.oracle.v1.DataSet.nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	case "guru.oracle.v1.DataSet.block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "guru.oracle.v1.DataSet.block_time":
		return protoreflect.ValueOfUint64(uint64(0))
	case "guru.oracle.v1.DataSet.raw_data":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: guru.oracle.v1.DataSet"))
		}
		panic(fmt.Errorf("message guru.oracle.v1.DataSet does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DataSet) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in guru.oracle.v1.DataSet", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DataSet) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DataSet) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DataSet) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DataSet) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DataSet)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.RequestId != 0 {
			n += 1 + runtime.Sov(uint64(x.RequestId))
		}
		if x.Nonce != 0 {
			n += 1 + runtime.Sov(uint64(x.Nonce))
		}
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		if x.BlockTime != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockTime))
		}
		l = len(x.RawData)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DataSet)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RawData) > 0 {
			i -= len(x.RawData)
			copy(dAtA[i:], x.RawData)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RawData)))
			i--
			dAtA[i] = 0x2a
		}
		if x.BlockTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockTime))
			i--
			dAtA[i] = 0x20
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x18
		}
		if x.Nonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Nonce))
			i--
			dAtA[i] = 0x10
		}
		if x.RequestId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RequestId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DataSet)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DataSet: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DataSet: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
				}
				x.RequestId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RequestId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
				}
				x.Nonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Nonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
				}
				x.BlockTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockTime |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RawData", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RawData = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: guru/oracle/v1/oracle.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OracleType defines the type of oracle data that can be requested and provided
// This enum helps categorize different kinds of oracle data sources and their purposes
type OracleType int32

const (
	// Default value, should not be used
	OracleType_ORACLE_TYPE_UNSPECIFIED OracleType = 0
	// Minimum gas price oracle for network fee estimation
	OracleType_ORACLE_TYPE_MIN_GAS_PRICE OracleType = 1
	// Currency exchange rates and forex data
	OracleType_ORACLE_TYPE_CURRENCY OracleType = 2
	// Stock market data and indices
	OracleType_ORACLE_TYPE_STOCK OracleType = 3
	// Cryptocurrency prices and market data
	OracleType_ORACLE_TYPE_CRYPTO OracleType = 4
)

// Enum value maps for OracleType.
var (
	OracleType_name = map[int32]string{
		0: "ORACLE_TYPE_UNSPECIFIED",
		1: "ORACLE_TYPE_MIN_GAS_PRICE",
		2: "ORACLE_TYPE_CURRENCY",
		3: "ORACLE_TYPE_STOCK",
		4: "ORACLE_TYPE_CRYPTO",
	}
	OracleType_value = map[string]int32{
		"ORACLE_TYPE_UNSPECIFIED":   0,
		"ORACLE_TYPE_MIN_GAS_PRICE": 1,
		"ORACLE_TYPE_CURRENCY":      2,
		"ORACLE_TYPE_STOCK":         3,
		"ORACLE_TYPE_CRYPTO":        4,
	}
)

func (x OracleType) Enum() *OracleType {
	p := new(OracleType)
	*p = x
	return p
}

func (x OracleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OracleType) Descriptor() protoreflect.EnumDescriptor {
	return file_guru_oracle_v1_oracle_proto_enumTypes[0].Descriptor()
}

func (OracleType) Type() protoreflect.EnumType {
	return &file_guru_oracle_v1_oracle_proto_enumTypes[0]
}

func (x OracleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OracleType.Descriptor instead.
func (OracleType) EnumDescriptor() ([]byte, []int) {
	return file_guru_oracle_v1_oracle_proto_rawDescGZIP(), []int{0}
}

// RequestStatus defines the current state of an oracle request
// This helps track the lifecycle of oracle data requests
type RequestStatus int32

const (
	// Default value, should not be used
	RequestStatus_REQUEST_STATUS_UNSPECIFIED RequestStatus = 0
	// Request is enabled
	RequestStatus_REQUEST_STATUS_ENABLED RequestStatus = 1
	// Request is paused
	RequestStatus_REQUEST_STATUS_PAUSED RequestStatus = 2
	// Request is disabled
	RequestStatus_REQUEST_STATUS_DISABLED RequestStatus = 3
)

// Enum value maps for RequestStatus.
var (
	RequestStatus_name = map[int32]string{
		0: "REQUEST_STATUS_UNSPECIFIED",
		1: "REQUEST_STATUS_ENABLED",
		2: "REQUEST_STATUS_PAUSED",
		3: "REQUEST_STATUS_DISABLED",
	}
	RequestStatus_value = map[string]int32{
		"REQUEST_STATUS_UNSPECIFIED": 0,
		"REQUEST_STATUS_ENABLED":     1,
		"REQUEST_STATUS_PAUSED":      2,
		"REQUEST_STATUS_DISABLED":    3,
	}
)

func (x RequestStatus) Enum() *RequestStatus {
	p := new(RequestStatus)
	*p = x
	return p
}

func (x RequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_guru_oracle_v1_oracle_proto_enumTypes[1].Descriptor()
}

func (RequestStatus) Type() protoreflect.EnumType {
	return &file_guru_oracle_v1_oracle_proto_enumTypes[1]
}

func (x RequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestStatus.Descriptor instead.
func (RequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_guru_oracle_v1_oracle_proto_rawDescGZIP(), []int{1}
}

// AggregationRule defines the enumeration for aggregating oracle data
// Specifies how multiple data points should be combined into a single value
type AggregationRule int32

const (
	// Default value, should not be used
	AggregationRule_AGGREGATION_RULE_UNSPECIFIED AggregationRule = 0
	// Use average value to aggregate the data
	AggregationRule_AGGREGATION_RULE_AVG AggregationRule = 1
	// Use minimum value to aggregate the data
	AggregationRule_AGGREGATION_RULE_MIN AggregationRule = 2
	// Use maximum value to aggregate the data
	AggregationRule_AGGREGATION_RULE_MAX AggregationRule = 3
	// Use median value to aggregate the data
	AggregationRule_AGGREGATION_RULE_MEDIAN AggregationRule = 4
)

// Enum value maps for AggregationRule.
var (
	AggregationRule_name = map[int32]string{
		0: "AGGREGATION_RULE_UNSPECIFIED",
		1: "AGGREGATION_RULE_AVG",
		2: "AGGREGATION_RULE_MIN",
		3: "AGGREGATION_RULE_MAX",
		4: "AGGREGATION_RULE_MEDIAN",
	}
	AggregationRule_value = map[string]int32{
		"AGGREGATION_RULE_UNSPECIFIED": 0,
		"AGGREGATION_RULE_AVG":         1,
		"AGGREGATION_RULE_MIN":         2,
		"AGGREGATION_RULE_MAX":         3,
		"AGGREGATION_RULE_MEDIAN":      4,
	}
)

func (x AggregationRule) Enum() *AggregationRule {
	p := new(AggregationRule)
	*p = x
	return p
}

func (x AggregationRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationRule) Descriptor() protoreflect.EnumDescriptor {
	return file_guru_oracle_v1_oracle_proto_enumTypes[2].Descriptor()
}

func (AggregationRule) Type() protoreflect.EnumType {
	return &file_guru_oracle_v1_oracle_proto_enumTypes[2]
}

func (x AggregationRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregationRule.Descriptor instead.
func (AggregationRule) EnumDescriptor() ([]byte, []int) {
	return file_guru_oracle_v1_oracle_proto_rawDescGZIP(), []int{2}
}

// OracleRequestDoc defines the structure for oracle request documents
// This is the main document that describes what oracle data is needed and how it should be processed
type OracleRequestDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the oracle request
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Type of oracle data being requested
	OracleType OracleType `protobuf:"varint,2,opt,name=oracle_type,json=oracleType,proto3,enum=guru.oracle.v1.OracleType" json:"oracle_type,omitempty"`
	// Human-readable name for the oracle request
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Detailed description of what data is needed and its purpose
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Time period in seconds between data updates
	Period uint32 `protobuf:"varint,5,opt,name=period,proto3" json:"period,omitempty"`
	// List of account addresses that are authorized to provide data
	AccountList []string `protobuf:"bytes,6,rep,name=account_list,json=accountList,proto3" json:"account_list,omitempty"`
	// Minimum number of oracle nodes required to validate the data
	Quorum uint32 `protobuf:"varint,7,opt,name=quorum,proto3" json:"quorum,omitempty"`
	// Source endpoints where the data can be fetched
	Endpoints []*OracleEndpoint `protobuf:"bytes,8,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// Rule for aggregating multiple data points (e.g., median, mean)
	AggregationRule AggregationRule `protobuf:"varint,9,opt,name=aggregation_rule,json=aggregationRule,proto3,enum=guru.oracle.v1.AggregationRule" json:"aggregation_rule,omitempty"`
	// Current status of the request
	Status RequestStatus `protobuf:"varint,10,opt,name=status,proto3,enum=guru.oracle.v1.RequestStatus" json:"status,omitempty"`
	// Sequential number to ensure data freshness
	Nonce uint64 `protobuf:"varint,12,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *OracleRequestDoc) Reset() {
	*x = OracleRequestDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guru_oracle_v1_oracle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleRequestDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleRequestDoc) ProtoMessage() {}

// Deprecated: Use OracleRequestDoc.ProtoReflect.Descriptor instead.
func (*OracleRequestDoc) Descriptor() ([]byte, []int) {
	return file_guru_oracle_v1_oracle_proto_rawDescGZIP(), []int{0}
}

func (x *OracleRequestDoc) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *OracleRequestDoc) GetOracleType() OracleType {
	if x != nil {
		return x.OracleType
	}
	return OracleType_ORACLE_TYPE_UNSPECIFIED
}

func (x *OracleRequestDoc) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OracleRequestDoc) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OracleRequestDoc) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *OracleRequestDoc) GetAccountList() []string {
	if x != nil {
		return x.AccountList
	}
	return nil
}

func (x *OracleRequestDoc) GetQuorum() uint32 {
	if x != nil {
		return x.Quorum
	}
	return 0
}

func (x *OracleRequestDoc) GetEndpoints() []*OracleEndpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *OracleRequestDoc) GetAggregationRule() AggregationRule {
	if x != nil {
		return x.AggregationRule
	}
	return AggregationRule_AGGREGATION_RULE_UNSPECIFIED
}

func (x *OracleRequestDoc) GetStatus() RequestStatus {
	if x != nil {
		return x.Status
	}
	return RequestStatus_REQUEST_STATUS_UNSPECIFIED
}

func (x *OracleRequestDoc) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type OracleEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of the oracle endpoint
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Type of the oracle endpoint
	ParseRule string `protobuf:"bytes,2,opt,name=parse_rule,json=parseRule,proto3" json:"parse_rule,omitempty"`
}

func (x *OracleEndpoint) Reset() {
	*x = OracleEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guru_oracle_v1_oracle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleEndpoint) ProtoMessage() {}

// Deprecated: Use OracleEndpoint.ProtoReflect.Descriptor instead.
func (*OracleEndpoint) Descriptor() ([]byte, []int) {
	return file_guru_oracle_v1_oracle_proto_rawDescGZIP(), []int{1}
}

func (x *OracleEndpoint) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *OracleEndpoint) GetParseRule() string {
	if x != nil {
		return x.ParseRule
	}
	return ""
}

// SubmitDataSet defines the structure for oracle data sets for submit
// This represents a single data point provided by an oracle node
type SubmitDataSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the request this data set belongs to
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Sequential number to prevent replay attacks
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Raw data in string format (can be JSON, CSV, etc.)
	RawData string `protobuf:"bytes,3,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
	// Address of the data provider
	Provider string `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	// Cryptographic signature of the data for verification
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SubmitDataSet) Reset() {
	*x = SubmitDataSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guru_oracle_v1_oracle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitDataSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitDataSet) ProtoMessage() {}

// Deprecated: Use SubmitDataSet.ProtoReflect.Descriptor instead.
func (*SubmitDataSet) Descriptor() ([]byte, []int) {
	return file_guru_oracle_v1_oracle_proto_rawDescGZIP(), []int{2}
}

func (x *SubmitDataSet) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *SubmitDataSet) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SubmitDataSet) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

func (x *SubmitDataSet) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *SubmitDataSet) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// DataSet defines the structure for oracle data sets
type DataSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request_id represents the ID of the request this data set belongs to
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// nonce represents the sequential number to prevent replay attacks
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// block_height represents the height of the block where the data was aggregated
	BlockHeight uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// block_time represents the time of the block where the data was aggregated
	BlockTime uint64 `protobuf:"varint,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	// raw_data represents the raw data in string format (can be JSON, CSV, etc.)
	RawData string `protobuf:"bytes,5,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (x *DataSet) Reset() {
	*x = DataSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_guru_oracle_v1_oracle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSet) ProtoMessage() {}

// Deprecated: Use DataSet.ProtoReflect.Descriptor instead.
func (*DataSet) Descriptor() ([]byte, []int) {
	return file_guru_oracle_v1_oracle_proto_rawDescGZIP(), []int{3}
}

func (x *DataSet) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *DataSet) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *DataSet) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *DataSet) GetBlockTime() uint64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *DataSet) GetRawData() string {
	if x != nil {
		return x.RawData
	}
	return ""
}

var File_guru_oracle_v1_oracle_proto protoreflect.FileDescriptor

var file_guru_oracle_v1_oracle_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x67, 0x75, 0x72, 0x75, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x67,
	0x75, 0x72, 0x75, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x67,
	0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x03, 0x0a, 0x10, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x67, 0x75, 0x72, 0x75, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x75, 0x72, 0x75, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x10,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x75, 0x72, 0x75, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x75, 0x72, 0x75, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x41, 0x0a, 0x0e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61,
	0x74, 0x61, 0x2a, 0x91, 0x01, 0x0a, 0x0a, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x41, 0x43, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52,
	0x59, 0x50, 0x54, 0x4f, 0x10, 0x04, 0x2a, 0x83, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x9e, 0x01, 0x0a,
	0x0f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x1c, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x41, 0x56, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03,
	0x12, 0x1b, 0x0a, 0x17, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4e, 0x10, 0x04, 0x42, 0xa5, 0x01,
	0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x75, 0x72, 0x75, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x28, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x75, 0x72, 0x75, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2f, 0x76, 0x31, 0x3b, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x47, 0x4f, 0x58, 0xaa, 0x02, 0x0e, 0x47, 0x75, 0x72, 0x75, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x47, 0x75, 0x72, 0x75, 0x5c, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x47, 0x75, 0x72, 0x75, 0x5c, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x10, 0x47, 0x75, 0x72, 0x75, 0x3a, 0x3a, 0x4f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_guru_oracle_v1_oracle_proto_rawDescOnce sync.Once
	file_guru_oracle_v1_oracle_proto_rawDescData = file_guru_oracle_v1_oracle_proto_rawDesc
)

func file_guru_oracle_v1_oracle_proto_rawDescGZIP() []byte {
	file_guru_oracle_v1_oracle_proto_rawDescOnce.Do(func() {
		file_guru_oracle_v1_oracle_proto_rawDescData = protoimpl.X.CompressGZIP(file_guru_oracle_v1_oracle_proto_rawDescData)
	})
	return file_guru_oracle_v1_oracle_proto_rawDescData
}

var file_guru_oracle_v1_oracle_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_guru_oracle_v1_oracle_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_guru_oracle_v1_oracle_proto_goTypes = []interface{}{
	(OracleType)(0),          // 0: guru.oracle.v1.OracleType
	(RequestStatus)(0),       // 1: guru.oracle.v1.RequestStatus
	(AggregationRule)(0),     // 2: guru.oracle.v1.AggregationRule
	(*OracleRequestDoc)(nil), // 3: guru.oracle.v1.OracleRequestDoc
	(*OracleEndpoint)(nil),   // 4: guru.oracle.v1.OracleEndpoint
	(*SubmitDataSet)(nil),    // 5: guru.oracle.v1.SubmitDataSet
	(*DataSet)(nil),          // 6: guru.oracle.v1.DataSet
}
var file_guru_oracle_v1_oracle_proto_depIdxs = []int32{
	0, // 0: guru.oracle.v1.OracleRequestDoc.oracle_type:type_name -> guru.oracle.v1.OracleType
	4, // 1: guru.oracle.v1.OracleRequestDoc.endpoints:type_name -> guru.oracle.v1.OracleEndpoint
	2, // 2: guru.oracle.v1.OracleRequestDoc.aggregation_rule:type_name -> guru.oracle.v1.AggregationRule
	1, // 3: guru.oracle.v1.OracleRequestDoc.status:type_name -> guru.oracle.v1.RequestStatus
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_guru_oracle_v1_oracle_proto_init() }
func file_guru_oracle_v1_oracle_proto_init() {
	if File_guru_oracle_v1_oracle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_guru_oracle_v1_oracle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleRequestDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guru_oracle_v1_oracle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guru_oracle_v1_oracle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitDataSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_guru_oracle_v1_oracle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_guru_oracle_v1_oracle_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_guru_oracle_v1_oracle_proto_goTypes,
		DependencyIndexes: file_guru_oracle_v1_oracle_proto_depIdxs,
		EnumInfos:         file_guru_oracle_v1_oracle_proto_enumTypes,
		MessageInfos:      file_guru_oracle_v1_oracle_proto_msgTypes,
	}.Build()
	File_guru_oracle_v1_oracle_proto = out.File
	file_guru_oracle_v1_oracle_proto_rawDesc = nil
	file_guru_oracle_v1_oracle_proto_goTypes = nil
	file_guru_oracle_v1_oracle_proto_depIdxs = nil
}
